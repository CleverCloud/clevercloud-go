/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// ZoneView struct for ZoneView
type ZoneView struct {
	Name                *string `json:"name,omitempty"`
	Internal            *bool   `json:"internal,omitempty"`
	CorrespondingRegion *string `json:"correspondingRegion,omitempty"`
}

// NewZoneView instantiates a new ZoneView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneView() *ZoneView {
	this := ZoneView{}
	return &this
}

// NewZoneViewWithDefaults instantiates a new ZoneView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneViewWithDefaults() *ZoneView {
	this := ZoneView{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ZoneView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ZoneView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ZoneView) SetName(v string) {
	o.Name = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *ZoneView) GetInternal() bool {
	if o == nil || o.Internal == nil {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneView) GetInternalOk() (*bool, bool) {
	if o == nil || o.Internal == nil {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *ZoneView) HasInternal() bool {
	if o != nil && o.Internal != nil {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *ZoneView) SetInternal(v bool) {
	o.Internal = &v
}

// GetCorrespondingRegion returns the CorrespondingRegion field value if set, zero value otherwise.
func (o *ZoneView) GetCorrespondingRegion() string {
	if o == nil || o.CorrespondingRegion == nil {
		var ret string
		return ret
	}
	return *o.CorrespondingRegion
}

// GetCorrespondingRegionOk returns a tuple with the CorrespondingRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneView) GetCorrespondingRegionOk() (*string, bool) {
	if o == nil || o.CorrespondingRegion == nil {
		return nil, false
	}
	return o.CorrespondingRegion, true
}

// HasCorrespondingRegion returns a boolean if a field has been set.
func (o *ZoneView) HasCorrespondingRegion() bool {
	if o != nil && o.CorrespondingRegion != nil {
		return true
	}

	return false
}

// SetCorrespondingRegion gets a reference to the given string and assigns it to the CorrespondingRegion field.
func (o *ZoneView) SetCorrespondingRegion(v string) {
	o.CorrespondingRegion = &v
}

func (o ZoneView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Internal != nil {
		toSerialize["internal"] = o.Internal
	}
	if o.CorrespondingRegion != nil {
		toSerialize["correspondingRegion"] = o.CorrespondingRegion
	}
	return json.Marshal(toSerialize)
}

type NullableZoneView struct {
	value *ZoneView
	isSet bool
}

func (v NullableZoneView) Get() *ZoneView {
	return v.value
}

func (v *NullableZoneView) Set(val *ZoneView) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneView) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneView(val *ZoneView) *NullableZoneView {
	return &NullableZoneView{value: val, isSet: true}
}

func (v NullableZoneView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
