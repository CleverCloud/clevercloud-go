/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// WannabeNamespace struct for WannabeNamespace
type WannabeNamespace struct {
	Namespace *string `json:"namespace,omitempty"`
	MinPort   *int64  `json:"minPort,omitempty"`
	MaxPort   *int64  `json:"maxPort,omitempty"`
}

// NewWannabeNamespace instantiates a new WannabeNamespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWannabeNamespace() *WannabeNamespace {
	this := WannabeNamespace{}
	return &this
}

// NewWannabeNamespaceWithDefaults instantiates a new WannabeNamespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWannabeNamespaceWithDefaults() *WannabeNamespace {
	this := WannabeNamespace{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *WannabeNamespace) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeNamespace) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *WannabeNamespace) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *WannabeNamespace) SetNamespace(v string) {
	o.Namespace = &v
}

// GetMinPort returns the MinPort field value if set, zero value otherwise.
func (o *WannabeNamespace) GetMinPort() int64 {
	if o == nil || o.MinPort == nil {
		var ret int64
		return ret
	}
	return *o.MinPort
}

// GetMinPortOk returns a tuple with the MinPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeNamespace) GetMinPortOk() (*int64, bool) {
	if o == nil || o.MinPort == nil {
		return nil, false
	}
	return o.MinPort, true
}

// HasMinPort returns a boolean if a field has been set.
func (o *WannabeNamespace) HasMinPort() bool {
	if o != nil && o.MinPort != nil {
		return true
	}

	return false
}

// SetMinPort gets a reference to the given int64 and assigns it to the MinPort field.
func (o *WannabeNamespace) SetMinPort(v int64) {
	o.MinPort = &v
}

// GetMaxPort returns the MaxPort field value if set, zero value otherwise.
func (o *WannabeNamespace) GetMaxPort() int64 {
	if o == nil || o.MaxPort == nil {
		var ret int64
		return ret
	}
	return *o.MaxPort
}

// GetMaxPortOk returns a tuple with the MaxPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeNamespace) GetMaxPortOk() (*int64, bool) {
	if o == nil || o.MaxPort == nil {
		return nil, false
	}
	return o.MaxPort, true
}

// HasMaxPort returns a boolean if a field has been set.
func (o *WannabeNamespace) HasMaxPort() bool {
	if o != nil && o.MaxPort != nil {
		return true
	}

	return false
}

// SetMaxPort gets a reference to the given int64 and assigns it to the MaxPort field.
func (o *WannabeNamespace) SetMaxPort(v int64) {
	o.MaxPort = &v
}

func (o WannabeNamespace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.MinPort != nil {
		toSerialize["minPort"] = o.MinPort
	}
	if o.MaxPort != nil {
		toSerialize["maxPort"] = o.MaxPort
	}
	return json.Marshal(toSerialize)
}

type NullableWannabeNamespace struct {
	value *WannabeNamespace
	isSet bool
}

func (v NullableWannabeNamespace) Get() *WannabeNamespace {
	return v.value
}

func (v *NullableWannabeNamespace) Set(val *WannabeNamespace) {
	v.value = val
	v.isSet = true
}

func (v NullableWannabeNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableWannabeNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWannabeNamespace(val *WannabeNamespace) *NullableWannabeNamespace {
	return &NullableWannabeNamespace{value: val, isSet: true}
}

func (v NullableWannabeNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWannabeNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
