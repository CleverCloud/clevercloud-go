/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// RecurrentPaymentView struct for RecurrentPaymentView
type RecurrentPaymentView struct {
	User            *UserView  `json:"user,omitempty"`
	Target          *OwnerView `json:"target,omitempty"`
	ThresholdAmount *float32   `json:"thresholdAmount,omitempty"`
	MonthlyAmount   *float32   `json:"monthlyAmount,omitempty"`
	Threshold       *float32   `json:"threshold,omitempty"`
	Currency        *string    `json:"currency,omitempty"`
	Token           *string    `json:"token,omitempty"`
}

// NewRecurrentPaymentView instantiates a new RecurrentPaymentView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrentPaymentView() *RecurrentPaymentView {
	this := RecurrentPaymentView{}
	return &this
}

// NewRecurrentPaymentViewWithDefaults instantiates a new RecurrentPaymentView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrentPaymentViewWithDefaults() *RecurrentPaymentView {
	this := RecurrentPaymentView{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RecurrentPaymentView) GetUser() UserView {
	if o == nil || o.User == nil {
		var ret UserView
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrentPaymentView) GetUserOk() (*UserView, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RecurrentPaymentView) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserView and assigns it to the User field.
func (o *RecurrentPaymentView) SetUser(v UserView) {
	o.User = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *RecurrentPaymentView) GetTarget() OwnerView {
	if o == nil || o.Target == nil {
		var ret OwnerView
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrentPaymentView) GetTargetOk() (*OwnerView, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *RecurrentPaymentView) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given OwnerView and assigns it to the Target field.
func (o *RecurrentPaymentView) SetTarget(v OwnerView) {
	o.Target = &v
}

// GetThresholdAmount returns the ThresholdAmount field value if set, zero value otherwise.
func (o *RecurrentPaymentView) GetThresholdAmount() float32 {
	if o == nil || o.ThresholdAmount == nil {
		var ret float32
		return ret
	}
	return *o.ThresholdAmount
}

// GetThresholdAmountOk returns a tuple with the ThresholdAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrentPaymentView) GetThresholdAmountOk() (*float32, bool) {
	if o == nil || o.ThresholdAmount == nil {
		return nil, false
	}
	return o.ThresholdAmount, true
}

// HasThresholdAmount returns a boolean if a field has been set.
func (o *RecurrentPaymentView) HasThresholdAmount() bool {
	if o != nil && o.ThresholdAmount != nil {
		return true
	}

	return false
}

// SetThresholdAmount gets a reference to the given float32 and assigns it to the ThresholdAmount field.
func (o *RecurrentPaymentView) SetThresholdAmount(v float32) {
	o.ThresholdAmount = &v
}

// GetMonthlyAmount returns the MonthlyAmount field value if set, zero value otherwise.
func (o *RecurrentPaymentView) GetMonthlyAmount() float32 {
	if o == nil || o.MonthlyAmount == nil {
		var ret float32
		return ret
	}
	return *o.MonthlyAmount
}

// GetMonthlyAmountOk returns a tuple with the MonthlyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrentPaymentView) GetMonthlyAmountOk() (*float32, bool) {
	if o == nil || o.MonthlyAmount == nil {
		return nil, false
	}
	return o.MonthlyAmount, true
}

// HasMonthlyAmount returns a boolean if a field has been set.
func (o *RecurrentPaymentView) HasMonthlyAmount() bool {
	if o != nil && o.MonthlyAmount != nil {
		return true
	}

	return false
}

// SetMonthlyAmount gets a reference to the given float32 and assigns it to the MonthlyAmount field.
func (o *RecurrentPaymentView) SetMonthlyAmount(v float32) {
	o.MonthlyAmount = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *RecurrentPaymentView) GetThreshold() float32 {
	if o == nil || o.Threshold == nil {
		var ret float32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrentPaymentView) GetThresholdOk() (*float32, bool) {
	if o == nil || o.Threshold == nil {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *RecurrentPaymentView) HasThreshold() bool {
	if o != nil && o.Threshold != nil {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float32 and assigns it to the Threshold field.
func (o *RecurrentPaymentView) SetThreshold(v float32) {
	o.Threshold = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *RecurrentPaymentView) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrentPaymentView) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *RecurrentPaymentView) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *RecurrentPaymentView) SetCurrency(v string) {
	o.Currency = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *RecurrentPaymentView) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrentPaymentView) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *RecurrentPaymentView) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *RecurrentPaymentView) SetToken(v string) {
	o.Token = &v
}

func (o RecurrentPaymentView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if o.ThresholdAmount != nil {
		toSerialize["thresholdAmount"] = o.ThresholdAmount
	}
	if o.MonthlyAmount != nil {
		toSerialize["monthlyAmount"] = o.MonthlyAmount
	}
	if o.Threshold != nil {
		toSerialize["threshold"] = o.Threshold
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrentPaymentView struct {
	value *RecurrentPaymentView
	isSet bool
}

func (v NullableRecurrentPaymentView) Get() *RecurrentPaymentView {
	return v.value
}

func (v *NullableRecurrentPaymentView) Set(val *RecurrentPaymentView) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrentPaymentView) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrentPaymentView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrentPaymentView(val *RecurrentPaymentView) *NullableRecurrentPaymentView {
	return &NullableRecurrentPaymentView{value: val, isSet: true}
}

func (v NullableRecurrentPaymentView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrentPaymentView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
