/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// UserView struct for UserView
type UserView struct {
	Id             *string   `json:"id,omitempty"`
	Email          *string   `json:"email,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Phone          *string   `json:"phone,omitempty"`
	Address        *string   `json:"address,omitempty"`
	City           *string   `json:"city,omitempty"`
	Zipcode        *string   `json:"zipcode,omitempty"`
	Country        *string   `json:"country,omitempty"`
	Avatar         *string   `json:"avatar,omitempty"`
	CreationDate   *int64    `json:"creationDate,omitempty"`
	Lang           *string   `json:"lang,omitempty"`
	EmailValidated *bool     `json:"emailValidated,omitempty"`
	OauthApps      *[]string `json:"oauthApps,omitempty"`
	Admin          *bool     `json:"admin,omitempty"`
	CanPay         *bool     `json:"canPay,omitempty"`
	PreferredMFA   *string   `json:"preferredMFA,omitempty"`
	HasPassword    *bool     `json:"hasPassword,omitempty"`
}

// NewUserView instantiates a new UserView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserView() *UserView {
	this := UserView{}
	return &this
}

// NewUserViewWithDefaults instantiates a new UserView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserViewWithDefaults() *UserView {
	this := UserView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserView) SetId(v string) {
	o.Id = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserView) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserView) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserView) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserView) SetName(v string) {
	o.Name = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *UserView) GetPhone() string {
	if o == nil || o.Phone == nil {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetPhoneOk() (*string, bool) {
	if o == nil || o.Phone == nil {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *UserView) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *UserView) SetPhone(v string) {
	o.Phone = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *UserView) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *UserView) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *UserView) SetAddress(v string) {
	o.Address = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UserView) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UserView) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *UserView) SetCity(v string) {
	o.City = &v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *UserView) GetZipcode() string {
	if o == nil || o.Zipcode == nil {
		var ret string
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetZipcodeOk() (*string, bool) {
	if o == nil || o.Zipcode == nil {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *UserView) HasZipcode() bool {
	if o != nil && o.Zipcode != nil {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given string and assigns it to the Zipcode field.
func (o *UserView) SetZipcode(v string) {
	o.Zipcode = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UserView) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UserView) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UserView) SetCountry(v string) {
	o.Country = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *UserView) GetAvatar() string {
	if o == nil || o.Avatar == nil {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetAvatarOk() (*string, bool) {
	if o == nil || o.Avatar == nil {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *UserView) HasAvatar() bool {
	if o != nil && o.Avatar != nil {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *UserView) SetAvatar(v string) {
	o.Avatar = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *UserView) GetCreationDate() int64 {
	if o == nil || o.CreationDate == nil {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetCreationDateOk() (*int64, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *UserView) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *UserView) SetCreationDate(v int64) {
	o.CreationDate = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *UserView) GetLang() string {
	if o == nil || o.Lang == nil {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetLangOk() (*string, bool) {
	if o == nil || o.Lang == nil {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *UserView) HasLang() bool {
	if o != nil && o.Lang != nil {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *UserView) SetLang(v string) {
	o.Lang = &v
}

// GetEmailValidated returns the EmailValidated field value if set, zero value otherwise.
func (o *UserView) GetEmailValidated() bool {
	if o == nil || o.EmailValidated == nil {
		var ret bool
		return ret
	}
	return *o.EmailValidated
}

// GetEmailValidatedOk returns a tuple with the EmailValidated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetEmailValidatedOk() (*bool, bool) {
	if o == nil || o.EmailValidated == nil {
		return nil, false
	}
	return o.EmailValidated, true
}

// HasEmailValidated returns a boolean if a field has been set.
func (o *UserView) HasEmailValidated() bool {
	if o != nil && o.EmailValidated != nil {
		return true
	}

	return false
}

// SetEmailValidated gets a reference to the given bool and assigns it to the EmailValidated field.
func (o *UserView) SetEmailValidated(v bool) {
	o.EmailValidated = &v
}

// GetOauthApps returns the OauthApps field value if set, zero value otherwise.
func (o *UserView) GetOauthApps() []string {
	if o == nil || o.OauthApps == nil {
		var ret []string
		return ret
	}
	return *o.OauthApps
}

// GetOauthAppsOk returns a tuple with the OauthApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetOauthAppsOk() (*[]string, bool) {
	if o == nil || o.OauthApps == nil {
		return nil, false
	}
	return o.OauthApps, true
}

// HasOauthApps returns a boolean if a field has been set.
func (o *UserView) HasOauthApps() bool {
	if o != nil && o.OauthApps != nil {
		return true
	}

	return false
}

// SetOauthApps gets a reference to the given []string and assigns it to the OauthApps field.
func (o *UserView) SetOauthApps(v []string) {
	o.OauthApps = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *UserView) GetAdmin() bool {
	if o == nil || o.Admin == nil {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetAdminOk() (*bool, bool) {
	if o == nil || o.Admin == nil {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *UserView) HasAdmin() bool {
	if o != nil && o.Admin != nil {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *UserView) SetAdmin(v bool) {
	o.Admin = &v
}

// GetCanPay returns the CanPay field value if set, zero value otherwise.
func (o *UserView) GetCanPay() bool {
	if o == nil || o.CanPay == nil {
		var ret bool
		return ret
	}
	return *o.CanPay
}

// GetCanPayOk returns a tuple with the CanPay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetCanPayOk() (*bool, bool) {
	if o == nil || o.CanPay == nil {
		return nil, false
	}
	return o.CanPay, true
}

// HasCanPay returns a boolean if a field has been set.
func (o *UserView) HasCanPay() bool {
	if o != nil && o.CanPay != nil {
		return true
	}

	return false
}

// SetCanPay gets a reference to the given bool and assigns it to the CanPay field.
func (o *UserView) SetCanPay(v bool) {
	o.CanPay = &v
}

// GetPreferredMFA returns the PreferredMFA field value if set, zero value otherwise.
func (o *UserView) GetPreferredMFA() string {
	if o == nil || o.PreferredMFA == nil {
		var ret string
		return ret
	}
	return *o.PreferredMFA
}

// GetPreferredMFAOk returns a tuple with the PreferredMFA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetPreferredMFAOk() (*string, bool) {
	if o == nil || o.PreferredMFA == nil {
		return nil, false
	}
	return o.PreferredMFA, true
}

// HasPreferredMFA returns a boolean if a field has been set.
func (o *UserView) HasPreferredMFA() bool {
	if o != nil && o.PreferredMFA != nil {
		return true
	}

	return false
}

// SetPreferredMFA gets a reference to the given string and assigns it to the PreferredMFA field.
func (o *UserView) SetPreferredMFA(v string) {
	o.PreferredMFA = &v
}

// GetHasPassword returns the HasPassword field value if set, zero value otherwise.
func (o *UserView) GetHasPassword() bool {
	if o == nil || o.HasPassword == nil {
		var ret bool
		return ret
	}
	return *o.HasPassword
}

// GetHasPasswordOk returns a tuple with the HasPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserView) GetHasPasswordOk() (*bool, bool) {
	if o == nil || o.HasPassword == nil {
		return nil, false
	}
	return o.HasPassword, true
}

// HasHasPassword returns a boolean if a field has been set.
func (o *UserView) HasHasPassword() bool {
	if o != nil && o.HasPassword != nil {
		return true
	}

	return false
}

// SetHasPassword gets a reference to the given bool and assigns it to the HasPassword field.
func (o *UserView) SetHasPassword(v bool) {
	o.HasPassword = &v
}

func (o UserView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Phone != nil {
		toSerialize["phone"] = o.Phone
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Zipcode != nil {
		toSerialize["zipcode"] = o.Zipcode
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Avatar != nil {
		toSerialize["avatar"] = o.Avatar
	}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	if o.Lang != nil {
		toSerialize["lang"] = o.Lang
	}
	if o.EmailValidated != nil {
		toSerialize["emailValidated"] = o.EmailValidated
	}
	if o.OauthApps != nil {
		toSerialize["oauthApps"] = o.OauthApps
	}
	if o.Admin != nil {
		toSerialize["admin"] = o.Admin
	}
	if o.CanPay != nil {
		toSerialize["canPay"] = o.CanPay
	}
	if o.PreferredMFA != nil {
		toSerialize["preferredMFA"] = o.PreferredMFA
	}
	if o.HasPassword != nil {
		toSerialize["hasPassword"] = o.HasPassword
	}
	return json.Marshal(toSerialize)
}

type NullableUserView struct {
	value *UserView
	isSet bool
}

func (v NullableUserView) Get() *UserView {
	return v.value
}

func (v *NullableUserView) Set(val *UserView) {
	v.value = val
	v.isSet = true
}

func (v NullableUserView) IsSet() bool {
	return v.isSet
}

func (v *NullableUserView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserView(val *UserView) *NullableUserView {
	return &NullableUserView{value: val, isSet: true}
}

func (v NullableUserView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
