/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// DropCountView struct for DropCountView
type DropCountView struct {
	OwnerId   *string        `json:"ownerId,omitempty"`
	Count     *float32       `json:"count,omitempty"`
	DropPrice *DropPriceView `json:"dropPrice,omitempty"`
}

// NewDropCountView instantiates a new DropCountView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDropCountView() *DropCountView {
	this := DropCountView{}
	return &this
}

// NewDropCountViewWithDefaults instantiates a new DropCountView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDropCountViewWithDefaults() *DropCountView {
	this := DropCountView{}
	return &this
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *DropCountView) GetOwnerId() string {
	if o == nil || o.OwnerId == nil {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DropCountView) GetOwnerIdOk() (*string, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *DropCountView) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *DropCountView) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *DropCountView) GetCount() float32 {
	if o == nil || o.Count == nil {
		var ret float32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DropCountView) GetCountOk() (*float32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *DropCountView) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given float32 and assigns it to the Count field.
func (o *DropCountView) SetCount(v float32) {
	o.Count = &v
}

// GetDropPrice returns the DropPrice field value if set, zero value otherwise.
func (o *DropCountView) GetDropPrice() DropPriceView {
	if o == nil || o.DropPrice == nil {
		var ret DropPriceView
		return ret
	}
	return *o.DropPrice
}

// GetDropPriceOk returns a tuple with the DropPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DropCountView) GetDropPriceOk() (*DropPriceView, bool) {
	if o == nil || o.DropPrice == nil {
		return nil, false
	}
	return o.DropPrice, true
}

// HasDropPrice returns a boolean if a field has been set.
func (o *DropCountView) HasDropPrice() bool {
	if o != nil && o.DropPrice != nil {
		return true
	}

	return false
}

// SetDropPrice gets a reference to the given DropPriceView and assigns it to the DropPrice field.
func (o *DropCountView) SetDropPrice(v DropPriceView) {
	o.DropPrice = &v
}

func (o DropCountView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.DropPrice != nil {
		toSerialize["dropPrice"] = o.DropPrice
	}
	return json.Marshal(toSerialize)
}

type NullableDropCountView struct {
	value *DropCountView
	isSet bool
}

func (v NullableDropCountView) Get() *DropCountView {
	return v.value
}

func (v *NullableDropCountView) Set(val *DropCountView) {
	v.value = val
	v.isSet = true
}

func (v NullableDropCountView) IsSet() bool {
	return v.isSet
}

func (v *NullableDropCountView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDropCountView(val *DropCountView) *NullableDropCountView {
	return &NullableDropCountView{value: val, isSet: true}
}

func (v NullableDropCountView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDropCountView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
