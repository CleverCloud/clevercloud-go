/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// WannabeUser struct for WannabeUser
type WannabeUser struct {
	Email              *string `json:"email,omitempty"`
	Name               *string `json:"name,omitempty"`
	Password           *string `json:"password,omitempty"`
	Phone              *string `json:"phone,omitempty"`
	Address            *string `json:"address,omitempty"`
	City               *string `json:"city,omitempty"`
	Zipcode            *string `json:"zipcode,omitempty"`
	Country            *string `json:"country,omitempty"`
	Lang               *string `json:"lang,omitempty"`
	Terms              *bool   `json:"terms,omitempty"`
	SubscriptionSource *string `json:"subscriptionSource,omitempty"`
}

// NewWannabeUser instantiates a new WannabeUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWannabeUser() *WannabeUser {
	this := WannabeUser{}
	return &this
}

// NewWannabeUserWithDefaults instantiates a new WannabeUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWannabeUserWithDefaults() *WannabeUser {
	this := WannabeUser{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *WannabeUser) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *WannabeUser) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *WannabeUser) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WannabeUser) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WannabeUser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WannabeUser) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *WannabeUser) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *WannabeUser) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *WannabeUser) SetPassword(v string) {
	o.Password = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *WannabeUser) GetPhone() string {
	if o == nil || o.Phone == nil {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetPhoneOk() (*string, bool) {
	if o == nil || o.Phone == nil {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *WannabeUser) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *WannabeUser) SetPhone(v string) {
	o.Phone = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *WannabeUser) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *WannabeUser) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *WannabeUser) SetAddress(v string) {
	o.Address = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *WannabeUser) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *WannabeUser) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *WannabeUser) SetCity(v string) {
	o.City = &v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *WannabeUser) GetZipcode() string {
	if o == nil || o.Zipcode == nil {
		var ret string
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetZipcodeOk() (*string, bool) {
	if o == nil || o.Zipcode == nil {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *WannabeUser) HasZipcode() bool {
	if o != nil && o.Zipcode != nil {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given string and assigns it to the Zipcode field.
func (o *WannabeUser) SetZipcode(v string) {
	o.Zipcode = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *WannabeUser) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *WannabeUser) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *WannabeUser) SetCountry(v string) {
	o.Country = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *WannabeUser) GetLang() string {
	if o == nil || o.Lang == nil {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetLangOk() (*string, bool) {
	if o == nil || o.Lang == nil {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *WannabeUser) HasLang() bool {
	if o != nil && o.Lang != nil {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *WannabeUser) SetLang(v string) {
	o.Lang = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *WannabeUser) GetTerms() bool {
	if o == nil || o.Terms == nil {
		var ret bool
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetTermsOk() (*bool, bool) {
	if o == nil || o.Terms == nil {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *WannabeUser) HasTerms() bool {
	if o != nil && o.Terms != nil {
		return true
	}

	return false
}

// SetTerms gets a reference to the given bool and assigns it to the Terms field.
func (o *WannabeUser) SetTerms(v bool) {
	o.Terms = &v
}

// GetSubscriptionSource returns the SubscriptionSource field value if set, zero value otherwise.
func (o *WannabeUser) GetSubscriptionSource() string {
	if o == nil || o.SubscriptionSource == nil {
		var ret string
		return ret
	}
	return *o.SubscriptionSource
}

// GetSubscriptionSourceOk returns a tuple with the SubscriptionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeUser) GetSubscriptionSourceOk() (*string, bool) {
	if o == nil || o.SubscriptionSource == nil {
		return nil, false
	}
	return o.SubscriptionSource, true
}

// HasSubscriptionSource returns a boolean if a field has been set.
func (o *WannabeUser) HasSubscriptionSource() bool {
	if o != nil && o.SubscriptionSource != nil {
		return true
	}

	return false
}

// SetSubscriptionSource gets a reference to the given string and assigns it to the SubscriptionSource field.
func (o *WannabeUser) SetSubscriptionSource(v string) {
	o.SubscriptionSource = &v
}

func (o WannabeUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Phone != nil {
		toSerialize["phone"] = o.Phone
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Zipcode != nil {
		toSerialize["zipcode"] = o.Zipcode
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Lang != nil {
		toSerialize["lang"] = o.Lang
	}
	if o.Terms != nil {
		toSerialize["terms"] = o.Terms
	}
	if o.SubscriptionSource != nil {
		toSerialize["subscriptionSource"] = o.SubscriptionSource
	}
	return json.Marshal(toSerialize)
}

type NullableWannabeUser struct {
	value *WannabeUser
	isSet bool
}

func (v NullableWannabeUser) Get() *WannabeUser {
	return v.value
}

func (v *NullableWannabeUser) Set(val *WannabeUser) {
	v.value = val
	v.isSet = true
}

func (v NullableWannabeUser) IsSet() bool {
	return v.isSet
}

func (v *NullableWannabeUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWannabeUser(val *WannabeUser) *NullableWannabeUser {
	return &NullableWannabeUser{value: val, isSet: true}
}

func (v NullableWannabeUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWannabeUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
