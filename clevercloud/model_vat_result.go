/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// VatResult struct for VatResult
type VatResult struct {
	Valid   *bool   `json:"valid,omitempty"`
	Name    *string `json:"name,omitempty"`
	Address *string `json:"address,omitempty"`
}

// NewVatResult instantiates a new VatResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVatResult() *VatResult {
	this := VatResult{}
	return &this
}

// NewVatResultWithDefaults instantiates a new VatResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVatResultWithDefaults() *VatResult {
	this := VatResult{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *VatResult) GetValid() bool {
	if o == nil || o.Valid == nil {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VatResult) GetValidOk() (*bool, bool) {
	if o == nil || o.Valid == nil {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *VatResult) HasValid() bool {
	if o != nil && o.Valid != nil {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *VatResult) SetValid(v bool) {
	o.Valid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VatResult) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VatResult) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VatResult) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VatResult) SetName(v string) {
	o.Name = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *VatResult) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VatResult) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *VatResult) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *VatResult) SetAddress(v string) {
	o.Address = &v
}

func (o VatResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Valid != nil {
		toSerialize["valid"] = o.Valid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	return json.Marshal(toSerialize)
}

type NullableVatResult struct {
	value *VatResult
	isSet bool
}

func (v NullableVatResult) Get() *VatResult {
	return v.value
}

func (v *NullableVatResult) Set(val *VatResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVatResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVatResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVatResult(val *VatResult) *NullableVatResult {
	return &NullableVatResult{value: val, isSet: true}
}

func (v NullableVatResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVatResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
