/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// InstanceView struct for InstanceView
type InstanceView struct {
	Type                *string              `json:"type,omitempty"`
	Version             *string              `json:"version,omitempty"`
	Variant             *InstanceVariantView `json:"variant,omitempty"`
	MinInstances        *int32               `json:"minInstances,omitempty"`
	MaxInstances        *int32               `json:"maxInstances,omitempty"`
	MaxAllowedInstances *int32               `json:"maxAllowedInstances,omitempty"`
	MinFlavor           *FlavorView          `json:"minFlavor,omitempty"`
	MaxFlavor           *FlavorView          `json:"maxFlavor,omitempty"`
	Flavors             *[]FlavorView        `json:"flavors,omitempty"`
	DefaultEnv          *map[string]string   `json:"defaultEnv,omitempty"`
	Lifetime            *string              `json:"lifetime,omitempty"`
	InstanceAndVersion  *string              `json:"instanceAndVersion,omitempty"`
}

// NewInstanceView instantiates a new InstanceView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceView() *InstanceView {
	this := InstanceView{}
	return &this
}

// NewInstanceViewWithDefaults instantiates a new InstanceView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceViewWithDefaults() *InstanceView {
	this := InstanceView{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InstanceView) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InstanceView) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InstanceView) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InstanceView) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InstanceView) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InstanceView) SetVersion(v string) {
	o.Version = &v
}

// GetVariant returns the Variant field value if set, zero value otherwise.
func (o *InstanceView) GetVariant() InstanceVariantView {
	if o == nil || o.Variant == nil {
		var ret InstanceVariantView
		return ret
	}
	return *o.Variant
}

// GetVariantOk returns a tuple with the Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetVariantOk() (*InstanceVariantView, bool) {
	if o == nil || o.Variant == nil {
		return nil, false
	}
	return o.Variant, true
}

// HasVariant returns a boolean if a field has been set.
func (o *InstanceView) HasVariant() bool {
	if o != nil && o.Variant != nil {
		return true
	}

	return false
}

// SetVariant gets a reference to the given InstanceVariantView and assigns it to the Variant field.
func (o *InstanceView) SetVariant(v InstanceVariantView) {
	o.Variant = &v
}

// GetMinInstances returns the MinInstances field value if set, zero value otherwise.
func (o *InstanceView) GetMinInstances() int32 {
	if o == nil || o.MinInstances == nil {
		var ret int32
		return ret
	}
	return *o.MinInstances
}

// GetMinInstancesOk returns a tuple with the MinInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetMinInstancesOk() (*int32, bool) {
	if o == nil || o.MinInstances == nil {
		return nil, false
	}
	return o.MinInstances, true
}

// HasMinInstances returns a boolean if a field has been set.
func (o *InstanceView) HasMinInstances() bool {
	if o != nil && o.MinInstances != nil {
		return true
	}

	return false
}

// SetMinInstances gets a reference to the given int32 and assigns it to the MinInstances field.
func (o *InstanceView) SetMinInstances(v int32) {
	o.MinInstances = &v
}

// GetMaxInstances returns the MaxInstances field value if set, zero value otherwise.
func (o *InstanceView) GetMaxInstances() int32 {
	if o == nil || o.MaxInstances == nil {
		var ret int32
		return ret
	}
	return *o.MaxInstances
}

// GetMaxInstancesOk returns a tuple with the MaxInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetMaxInstancesOk() (*int32, bool) {
	if o == nil || o.MaxInstances == nil {
		return nil, false
	}
	return o.MaxInstances, true
}

// HasMaxInstances returns a boolean if a field has been set.
func (o *InstanceView) HasMaxInstances() bool {
	if o != nil && o.MaxInstances != nil {
		return true
	}

	return false
}

// SetMaxInstances gets a reference to the given int32 and assigns it to the MaxInstances field.
func (o *InstanceView) SetMaxInstances(v int32) {
	o.MaxInstances = &v
}

// GetMaxAllowedInstances returns the MaxAllowedInstances field value if set, zero value otherwise.
func (o *InstanceView) GetMaxAllowedInstances() int32 {
	if o == nil || o.MaxAllowedInstances == nil {
		var ret int32
		return ret
	}
	return *o.MaxAllowedInstances
}

// GetMaxAllowedInstancesOk returns a tuple with the MaxAllowedInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetMaxAllowedInstancesOk() (*int32, bool) {
	if o == nil || o.MaxAllowedInstances == nil {
		return nil, false
	}
	return o.MaxAllowedInstances, true
}

// HasMaxAllowedInstances returns a boolean if a field has been set.
func (o *InstanceView) HasMaxAllowedInstances() bool {
	if o != nil && o.MaxAllowedInstances != nil {
		return true
	}

	return false
}

// SetMaxAllowedInstances gets a reference to the given int32 and assigns it to the MaxAllowedInstances field.
func (o *InstanceView) SetMaxAllowedInstances(v int32) {
	o.MaxAllowedInstances = &v
}

// GetMinFlavor returns the MinFlavor field value if set, zero value otherwise.
func (o *InstanceView) GetMinFlavor() FlavorView {
	if o == nil || o.MinFlavor == nil {
		var ret FlavorView
		return ret
	}
	return *o.MinFlavor
}

// GetMinFlavorOk returns a tuple with the MinFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetMinFlavorOk() (*FlavorView, bool) {
	if o == nil || o.MinFlavor == nil {
		return nil, false
	}
	return o.MinFlavor, true
}

// HasMinFlavor returns a boolean if a field has been set.
func (o *InstanceView) HasMinFlavor() bool {
	if o != nil && o.MinFlavor != nil {
		return true
	}

	return false
}

// SetMinFlavor gets a reference to the given FlavorView and assigns it to the MinFlavor field.
func (o *InstanceView) SetMinFlavor(v FlavorView) {
	o.MinFlavor = &v
}

// GetMaxFlavor returns the MaxFlavor field value if set, zero value otherwise.
func (o *InstanceView) GetMaxFlavor() FlavorView {
	if o == nil || o.MaxFlavor == nil {
		var ret FlavorView
		return ret
	}
	return *o.MaxFlavor
}

// GetMaxFlavorOk returns a tuple with the MaxFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetMaxFlavorOk() (*FlavorView, bool) {
	if o == nil || o.MaxFlavor == nil {
		return nil, false
	}
	return o.MaxFlavor, true
}

// HasMaxFlavor returns a boolean if a field has been set.
func (o *InstanceView) HasMaxFlavor() bool {
	if o != nil && o.MaxFlavor != nil {
		return true
	}

	return false
}

// SetMaxFlavor gets a reference to the given FlavorView and assigns it to the MaxFlavor field.
func (o *InstanceView) SetMaxFlavor(v FlavorView) {
	o.MaxFlavor = &v
}

// GetFlavors returns the Flavors field value if set, zero value otherwise.
func (o *InstanceView) GetFlavors() []FlavorView {
	if o == nil || o.Flavors == nil {
		var ret []FlavorView
		return ret
	}
	return *o.Flavors
}

// GetFlavorsOk returns a tuple with the Flavors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetFlavorsOk() (*[]FlavorView, bool) {
	if o == nil || o.Flavors == nil {
		return nil, false
	}
	return o.Flavors, true
}

// HasFlavors returns a boolean if a field has been set.
func (o *InstanceView) HasFlavors() bool {
	if o != nil && o.Flavors != nil {
		return true
	}

	return false
}

// SetFlavors gets a reference to the given []FlavorView and assigns it to the Flavors field.
func (o *InstanceView) SetFlavors(v []FlavorView) {
	o.Flavors = &v
}

// GetDefaultEnv returns the DefaultEnv field value if set, zero value otherwise.
func (o *InstanceView) GetDefaultEnv() map[string]string {
	if o == nil || o.DefaultEnv == nil {
		var ret map[string]string
		return ret
	}
	return *o.DefaultEnv
}

// GetDefaultEnvOk returns a tuple with the DefaultEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetDefaultEnvOk() (*map[string]string, bool) {
	if o == nil || o.DefaultEnv == nil {
		return nil, false
	}
	return o.DefaultEnv, true
}

// HasDefaultEnv returns a boolean if a field has been set.
func (o *InstanceView) HasDefaultEnv() bool {
	if o != nil && o.DefaultEnv != nil {
		return true
	}

	return false
}

// SetDefaultEnv gets a reference to the given map[string]string and assigns it to the DefaultEnv field.
func (o *InstanceView) SetDefaultEnv(v map[string]string) {
	o.DefaultEnv = &v
}

// GetLifetime returns the Lifetime field value if set, zero value otherwise.
func (o *InstanceView) GetLifetime() string {
	if o == nil || o.Lifetime == nil {
		var ret string
		return ret
	}
	return *o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetLifetimeOk() (*string, bool) {
	if o == nil || o.Lifetime == nil {
		return nil, false
	}
	return o.Lifetime, true
}

// HasLifetime returns a boolean if a field has been set.
func (o *InstanceView) HasLifetime() bool {
	if o != nil && o.Lifetime != nil {
		return true
	}

	return false
}

// SetLifetime gets a reference to the given string and assigns it to the Lifetime field.
func (o *InstanceView) SetLifetime(v string) {
	o.Lifetime = &v
}

// GetInstanceAndVersion returns the InstanceAndVersion field value if set, zero value otherwise.
func (o *InstanceView) GetInstanceAndVersion() string {
	if o == nil || o.InstanceAndVersion == nil {
		var ret string
		return ret
	}
	return *o.InstanceAndVersion
}

// GetInstanceAndVersionOk returns a tuple with the InstanceAndVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceView) GetInstanceAndVersionOk() (*string, bool) {
	if o == nil || o.InstanceAndVersion == nil {
		return nil, false
	}
	return o.InstanceAndVersion, true
}

// HasInstanceAndVersion returns a boolean if a field has been set.
func (o *InstanceView) HasInstanceAndVersion() bool {
	if o != nil && o.InstanceAndVersion != nil {
		return true
	}

	return false
}

// SetInstanceAndVersion gets a reference to the given string and assigns it to the InstanceAndVersion field.
func (o *InstanceView) SetInstanceAndVersion(v string) {
	o.InstanceAndVersion = &v
}

func (o InstanceView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Variant != nil {
		toSerialize["variant"] = o.Variant
	}
	if o.MinInstances != nil {
		toSerialize["minInstances"] = o.MinInstances
	}
	if o.MaxInstances != nil {
		toSerialize["maxInstances"] = o.MaxInstances
	}
	if o.MaxAllowedInstances != nil {
		toSerialize["maxAllowedInstances"] = o.MaxAllowedInstances
	}
	if o.MinFlavor != nil {
		toSerialize["minFlavor"] = o.MinFlavor
	}
	if o.MaxFlavor != nil {
		toSerialize["maxFlavor"] = o.MaxFlavor
	}
	if o.Flavors != nil {
		toSerialize["flavors"] = o.Flavors
	}
	if o.DefaultEnv != nil {
		toSerialize["defaultEnv"] = o.DefaultEnv
	}
	if o.Lifetime != nil {
		toSerialize["lifetime"] = o.Lifetime
	}
	if o.InstanceAndVersion != nil {
		toSerialize["instanceAndVersion"] = o.InstanceAndVersion
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceView struct {
	value *InstanceView
	isSet bool
}

func (v NullableInstanceView) Get() *InstanceView {
	return v.value
}

func (v *NullableInstanceView) Set(val *InstanceView) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceView) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceView(val *InstanceView) *NullableInstanceView {
	return &NullableInstanceView{value: val, isSet: true}
}

func (v NullableInstanceView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
