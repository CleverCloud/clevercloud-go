/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// ValueWithUnit struct for ValueWithUnit
type ValueWithUnit struct {
	Unit      *string  `json:"unit,omitempty"`
	Value     *float32 `json:"value,omitempty"`
	Formatted *string  `json:"formatted,omitempty"`
}

// NewValueWithUnit instantiates a new ValueWithUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueWithUnit() *ValueWithUnit {
	this := ValueWithUnit{}
	return &this
}

// NewValueWithUnitWithDefaults instantiates a new ValueWithUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueWithUnitWithDefaults() *ValueWithUnit {
	this := ValueWithUnit{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *ValueWithUnit) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueWithUnit) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ValueWithUnit) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *ValueWithUnit) SetUnit(v string) {
	o.Unit = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ValueWithUnit) GetValue() float32 {
	if o == nil || o.Value == nil {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueWithUnit) GetValueOk() (*float32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ValueWithUnit) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *ValueWithUnit) SetValue(v float32) {
	o.Value = &v
}

// GetFormatted returns the Formatted field value if set, zero value otherwise.
func (o *ValueWithUnit) GetFormatted() string {
	if o == nil || o.Formatted == nil {
		var ret string
		return ret
	}
	return *o.Formatted
}

// GetFormattedOk returns a tuple with the Formatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueWithUnit) GetFormattedOk() (*string, bool) {
	if o == nil || o.Formatted == nil {
		return nil, false
	}
	return o.Formatted, true
}

// HasFormatted returns a boolean if a field has been set.
func (o *ValueWithUnit) HasFormatted() bool {
	if o != nil && o.Formatted != nil {
		return true
	}

	return false
}

// SetFormatted gets a reference to the given string and assigns it to the Formatted field.
func (o *ValueWithUnit) SetFormatted(v string) {
	o.Formatted = &v
}

func (o ValueWithUnit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Formatted != nil {
		toSerialize["formatted"] = o.Formatted
	}
	return json.Marshal(toSerialize)
}

type NullableValueWithUnit struct {
	value *ValueWithUnit
	isSet bool
}

func (v NullableValueWithUnit) Get() *ValueWithUnit {
	return v.value
}

func (v *NullableValueWithUnit) Set(val *ValueWithUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableValueWithUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableValueWithUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueWithUnit(val *ValueWithUnit) *NullableValueWithUnit {
	return &NullableValueWithUnit{value: val, isSet: true}
}

func (v NullableValueWithUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueWithUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
