/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// TcpRedirView struct for TcpRedirView
type TcpRedirView struct {
	Namespace *string `json:"namespace,omitempty"`
	Port      *int64  `json:"port,omitempty"`
}

// NewTcpRedirView instantiates a new TcpRedirView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTcpRedirView() *TcpRedirView {
	this := TcpRedirView{}
	return &this
}

// NewTcpRedirViewWithDefaults instantiates a new TcpRedirView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTcpRedirViewWithDefaults() *TcpRedirView {
	this := TcpRedirView{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *TcpRedirView) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TcpRedirView) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *TcpRedirView) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *TcpRedirView) SetNamespace(v string) {
	o.Namespace = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *TcpRedirView) GetPort() int64 {
	if o == nil || o.Port == nil {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TcpRedirView) GetPortOk() (*int64, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *TcpRedirView) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *TcpRedirView) SetPort(v int64) {
	o.Port = &v
}

func (o TcpRedirView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableTcpRedirView struct {
	value *TcpRedirView
	isSet bool
}

func (v NullableTcpRedirView) Get() *TcpRedirView {
	return v.value
}

func (v *NullableTcpRedirView) Set(val *TcpRedirView) {
	v.value = val
	v.isSet = true
}

func (v NullableTcpRedirView) IsSet() bool {
	return v.isSet
}

func (v *NullableTcpRedirView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTcpRedirView(val *TcpRedirView) *NullableTcpRedirView {
	return &NullableTcpRedirView{value: val, isSet: true}
}

func (v NullableTcpRedirView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTcpRedirView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
