/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// WannabePassword struct for WannabePassword
type WannabePassword struct {
	OldPassword *string `json:"oldPassword,omitempty"`
	NewPassword *string `json:"newPassword,omitempty"`
	DropTokens  *bool   `json:"dropTokens,omitempty"`
}

// NewWannabePassword instantiates a new WannabePassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWannabePassword() *WannabePassword {
	this := WannabePassword{}
	return &this
}

// NewWannabePasswordWithDefaults instantiates a new WannabePassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWannabePasswordWithDefaults() *WannabePassword {
	this := WannabePassword{}
	return &this
}

// GetOldPassword returns the OldPassword field value if set, zero value otherwise.
func (o *WannabePassword) GetOldPassword() string {
	if o == nil || o.OldPassword == nil {
		var ret string
		return ret
	}
	return *o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabePassword) GetOldPasswordOk() (*string, bool) {
	if o == nil || o.OldPassword == nil {
		return nil, false
	}
	return o.OldPassword, true
}

// HasOldPassword returns a boolean if a field has been set.
func (o *WannabePassword) HasOldPassword() bool {
	if o != nil && o.OldPassword != nil {
		return true
	}

	return false
}

// SetOldPassword gets a reference to the given string and assigns it to the OldPassword field.
func (o *WannabePassword) SetOldPassword(v string) {
	o.OldPassword = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *WannabePassword) GetNewPassword() string {
	if o == nil || o.NewPassword == nil {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabePassword) GetNewPasswordOk() (*string, bool) {
	if o == nil || o.NewPassword == nil {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *WannabePassword) HasNewPassword() bool {
	if o != nil && o.NewPassword != nil {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *WannabePassword) SetNewPassword(v string) {
	o.NewPassword = &v
}

// GetDropTokens returns the DropTokens field value if set, zero value otherwise.
func (o *WannabePassword) GetDropTokens() bool {
	if o == nil || o.DropTokens == nil {
		var ret bool
		return ret
	}
	return *o.DropTokens
}

// GetDropTokensOk returns a tuple with the DropTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabePassword) GetDropTokensOk() (*bool, bool) {
	if o == nil || o.DropTokens == nil {
		return nil, false
	}
	return o.DropTokens, true
}

// HasDropTokens returns a boolean if a field has been set.
func (o *WannabePassword) HasDropTokens() bool {
	if o != nil && o.DropTokens != nil {
		return true
	}

	return false
}

// SetDropTokens gets a reference to the given bool and assigns it to the DropTokens field.
func (o *WannabePassword) SetDropTokens(v bool) {
	o.DropTokens = &v
}

func (o WannabePassword) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OldPassword != nil {
		toSerialize["oldPassword"] = o.OldPassword
	}
	if o.NewPassword != nil {
		toSerialize["newPassword"] = o.NewPassword
	}
	if o.DropTokens != nil {
		toSerialize["dropTokens"] = o.DropTokens
	}
	return json.Marshal(toSerialize)
}

type NullableWannabePassword struct {
	value *WannabePassword
	isSet bool
}

func (v NullableWannabePassword) Get() *WannabePassword {
	return v.value
}

func (v *NullableWannabePassword) Set(val *WannabePassword) {
	v.value = val
	v.isSet = true
}

func (v NullableWannabePassword) IsSet() bool {
	return v.isSet
}

func (v *NullableWannabePassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWannabePassword(val *WannabePassword) *NullableWannabePassword {
	return &NullableWannabePassword{value: val, isSet: true}
}

func (v NullableWannabePassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWannabePassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
