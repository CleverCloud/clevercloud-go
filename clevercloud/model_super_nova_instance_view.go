/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// SuperNovaInstanceView struct for SuperNovaInstanceView
type SuperNovaInstanceView struct {
	Id             *string          `json:"id,omitempty"`
	AppId          *string          `json:"appId,omitempty"`
	Ip             *string          `json:"ip,omitempty"`
	AppPort        *int32           `json:"appPort,omitempty"`
	State          *string          `json:"state,omitempty"`
	Flavor         *SuperNovaFlavor `json:"flavor,omitempty"`
	Commit         *string          `json:"commit,omitempty"`
	DeployNumber   *int32           `json:"deployNumber,omitempty"`
	DeployId       *string          `json:"deployId,omitempty"`
	InstanceNumber *int32           `json:"instanceNumber,omitempty"`
	DisplayName    *string          `json:"displayName,omitempty"`
	CreationDate   *int64           `json:"creationDate,omitempty"`
}

// NewSuperNovaInstanceView instantiates a new SuperNovaInstanceView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperNovaInstanceView() *SuperNovaInstanceView {
	this := SuperNovaInstanceView{}
	return &this
}

// NewSuperNovaInstanceViewWithDefaults instantiates a new SuperNovaInstanceView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperNovaInstanceViewWithDefaults() *SuperNovaInstanceView {
	this := SuperNovaInstanceView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SuperNovaInstanceView) SetId(v string) {
	o.Id = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetAppId() string {
	if o == nil || o.AppId == nil {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetAppIdOk() (*string, bool) {
	if o == nil || o.AppId == nil {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasAppId() bool {
	if o != nil && o.AppId != nil {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *SuperNovaInstanceView) SetAppId(v string) {
	o.AppId = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *SuperNovaInstanceView) SetIp(v string) {
	o.Ip = &v
}

// GetAppPort returns the AppPort field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetAppPort() int32 {
	if o == nil || o.AppPort == nil {
		var ret int32
		return ret
	}
	return *o.AppPort
}

// GetAppPortOk returns a tuple with the AppPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetAppPortOk() (*int32, bool) {
	if o == nil || o.AppPort == nil {
		return nil, false
	}
	return o.AppPort, true
}

// HasAppPort returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasAppPort() bool {
	if o != nil && o.AppPort != nil {
		return true
	}

	return false
}

// SetAppPort gets a reference to the given int32 and assigns it to the AppPort field.
func (o *SuperNovaInstanceView) SetAppPort(v int32) {
	o.AppPort = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SuperNovaInstanceView) SetState(v string) {
	o.State = &v
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetFlavor() SuperNovaFlavor {
	if o == nil || o.Flavor == nil {
		var ret SuperNovaFlavor
		return ret
	}
	return *o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetFlavorOk() (*SuperNovaFlavor, bool) {
	if o == nil || o.Flavor == nil {
		return nil, false
	}
	return o.Flavor, true
}

// HasFlavor returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasFlavor() bool {
	if o != nil && o.Flavor != nil {
		return true
	}

	return false
}

// SetFlavor gets a reference to the given SuperNovaFlavor and assigns it to the Flavor field.
func (o *SuperNovaInstanceView) SetFlavor(v SuperNovaFlavor) {
	o.Flavor = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetCommit() string {
	if o == nil || o.Commit == nil {
		var ret string
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetCommitOk() (*string, bool) {
	if o == nil || o.Commit == nil {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasCommit() bool {
	if o != nil && o.Commit != nil {
		return true
	}

	return false
}

// SetCommit gets a reference to the given string and assigns it to the Commit field.
func (o *SuperNovaInstanceView) SetCommit(v string) {
	o.Commit = &v
}

// GetDeployNumber returns the DeployNumber field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetDeployNumber() int32 {
	if o == nil || o.DeployNumber == nil {
		var ret int32
		return ret
	}
	return *o.DeployNumber
}

// GetDeployNumberOk returns a tuple with the DeployNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetDeployNumberOk() (*int32, bool) {
	if o == nil || o.DeployNumber == nil {
		return nil, false
	}
	return o.DeployNumber, true
}

// HasDeployNumber returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasDeployNumber() bool {
	if o != nil && o.DeployNumber != nil {
		return true
	}

	return false
}

// SetDeployNumber gets a reference to the given int32 and assigns it to the DeployNumber field.
func (o *SuperNovaInstanceView) SetDeployNumber(v int32) {
	o.DeployNumber = &v
}

// GetDeployId returns the DeployId field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetDeployId() string {
	if o == nil || o.DeployId == nil {
		var ret string
		return ret
	}
	return *o.DeployId
}

// GetDeployIdOk returns a tuple with the DeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetDeployIdOk() (*string, bool) {
	if o == nil || o.DeployId == nil {
		return nil, false
	}
	return o.DeployId, true
}

// HasDeployId returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasDeployId() bool {
	if o != nil && o.DeployId != nil {
		return true
	}

	return false
}

// SetDeployId gets a reference to the given string and assigns it to the DeployId field.
func (o *SuperNovaInstanceView) SetDeployId(v string) {
	o.DeployId = &v
}

// GetInstanceNumber returns the InstanceNumber field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetInstanceNumber() int32 {
	if o == nil || o.InstanceNumber == nil {
		var ret int32
		return ret
	}
	return *o.InstanceNumber
}

// GetInstanceNumberOk returns a tuple with the InstanceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetInstanceNumberOk() (*int32, bool) {
	if o == nil || o.InstanceNumber == nil {
		return nil, false
	}
	return o.InstanceNumber, true
}

// HasInstanceNumber returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasInstanceNumber() bool {
	if o != nil && o.InstanceNumber != nil {
		return true
	}

	return false
}

// SetInstanceNumber gets a reference to the given int32 and assigns it to the InstanceNumber field.
func (o *SuperNovaInstanceView) SetInstanceNumber(v int32) {
	o.InstanceNumber = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SuperNovaInstanceView) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *SuperNovaInstanceView) GetCreationDate() int64 {
	if o == nil || o.CreationDate == nil {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceView) GetCreationDateOk() (*int64, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *SuperNovaInstanceView) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *SuperNovaInstanceView) SetCreationDate(v int64) {
	o.CreationDate = &v
}

func (o SuperNovaInstanceView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AppId != nil {
		toSerialize["appId"] = o.AppId
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.AppPort != nil {
		toSerialize["appPort"] = o.AppPort
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Flavor != nil {
		toSerialize["flavor"] = o.Flavor
	}
	if o.Commit != nil {
		toSerialize["commit"] = o.Commit
	}
	if o.DeployNumber != nil {
		toSerialize["deployNumber"] = o.DeployNumber
	}
	if o.DeployId != nil {
		toSerialize["deployId"] = o.DeployId
	}
	if o.InstanceNumber != nil {
		toSerialize["instanceNumber"] = o.InstanceNumber
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	return json.Marshal(toSerialize)
}

type NullableSuperNovaInstanceView struct {
	value *SuperNovaInstanceView
	isSet bool
}

func (v NullableSuperNovaInstanceView) Get() *SuperNovaInstanceView {
	return v.value
}

func (v *NullableSuperNovaInstanceView) Set(val *SuperNovaInstanceView) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperNovaInstanceView) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperNovaInstanceView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperNovaInstanceView(val *SuperNovaInstanceView) *NullableSuperNovaInstanceView {
	return &NullableSuperNovaInstanceView{value: val, isSet: true}
}

func (v NullableSuperNovaInstanceView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperNovaInstanceView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
