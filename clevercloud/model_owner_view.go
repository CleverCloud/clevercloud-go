/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// OwnerView struct for OwnerView
type OwnerView struct {
	Id       *string   `json:"id,omitempty"`
	Identity *string   `json:"identity,omitempty"`
	Emails   *[]string `json:"emails,omitempty"`
}

// NewOwnerView instantiates a new OwnerView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnerView() *OwnerView {
	this := OwnerView{}
	return &this
}

// NewOwnerViewWithDefaults instantiates a new OwnerView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnerViewWithDefaults() *OwnerView {
	this := OwnerView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OwnerView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OwnerView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OwnerView) SetId(v string) {
	o.Id = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *OwnerView) GetIdentity() string {
	if o == nil || o.Identity == nil {
		var ret string
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerView) GetIdentityOk() (*string, bool) {
	if o == nil || o.Identity == nil {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *OwnerView) HasIdentity() bool {
	if o != nil && o.Identity != nil {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given string and assigns it to the Identity field.
func (o *OwnerView) SetIdentity(v string) {
	o.Identity = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *OwnerView) GetEmails() []string {
	if o == nil || o.Emails == nil {
		var ret []string
		return ret
	}
	return *o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnerView) GetEmailsOk() (*[]string, bool) {
	if o == nil || o.Emails == nil {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *OwnerView) HasEmails() bool {
	if o != nil && o.Emails != nil {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []string and assigns it to the Emails field.
func (o *OwnerView) SetEmails(v []string) {
	o.Emails = &v
}

func (o OwnerView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Identity != nil {
		toSerialize["identity"] = o.Identity
	}
	if o.Emails != nil {
		toSerialize["emails"] = o.Emails
	}
	return json.Marshal(toSerialize)
}

type NullableOwnerView struct {
	value *OwnerView
	isSet bool
}

func (v NullableOwnerView) Get() *OwnerView {
	return v.value
}

func (v *NullableOwnerView) Set(val *OwnerView) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnerView) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnerView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnerView(val *OwnerView) *NullableOwnerView {
	return &NullableOwnerView{value: val, isSet: true}
}

func (v NullableOwnerView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnerView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
