/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// AddonFeatureView struct for AddonFeatureView
type AddonFeatureView struct {
	Name     *string `json:"name,omitempty"`
	Type     *string `json:"type,omitempty"`
	NameCode *string `json:"name_code,omitempty"`
}

// NewAddonFeatureView instantiates a new AddonFeatureView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonFeatureView() *AddonFeatureView {
	this := AddonFeatureView{}
	return &this
}

// NewAddonFeatureViewWithDefaults instantiates a new AddonFeatureView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonFeatureViewWithDefaults() *AddonFeatureView {
	this := AddonFeatureView{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddonFeatureView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonFeatureView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AddonFeatureView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddonFeatureView) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AddonFeatureView) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonFeatureView) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AddonFeatureView) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AddonFeatureView) SetType(v string) {
	o.Type = &v
}

// GetNameCode returns the NameCode field value if set, zero value otherwise.
func (o *AddonFeatureView) GetNameCode() string {
	if o == nil || o.NameCode == nil {
		var ret string
		return ret
	}
	return *o.NameCode
}

// GetNameCodeOk returns a tuple with the NameCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonFeatureView) GetNameCodeOk() (*string, bool) {
	if o == nil || o.NameCode == nil {
		return nil, false
	}
	return o.NameCode, true
}

// HasNameCode returns a boolean if a field has been set.
func (o *AddonFeatureView) HasNameCode() bool {
	if o != nil && o.NameCode != nil {
		return true
	}

	return false
}

// SetNameCode gets a reference to the given string and assigns it to the NameCode field.
func (o *AddonFeatureView) SetNameCode(v string) {
	o.NameCode = &v
}

func (o AddonFeatureView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.NameCode != nil {
		toSerialize["name_code"] = o.NameCode
	}
	return json.Marshal(toSerialize)
}

type NullableAddonFeatureView struct {
	value *AddonFeatureView
	isSet bool
}

func (v NullableAddonFeatureView) Get() *AddonFeatureView {
	return v.value
}

func (v *NullableAddonFeatureView) Set(val *AddonFeatureView) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonFeatureView) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonFeatureView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonFeatureView(val *AddonFeatureView) *NullableAddonFeatureView {
	return &NullableAddonFeatureView{value: val, isSet: true}
}

func (v NullableAddonFeatureView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonFeatureView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
