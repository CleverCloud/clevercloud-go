/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// Summary struct for Summary
type Summary struct {
	User          *UserSummary           `json:"user,omitempty"`
	Organisations *[]OrganisationSummary `json:"organisations,omitempty"`
}

// NewSummary instantiates a new Summary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummary() *Summary {
	this := Summary{}
	return &this
}

// NewSummaryWithDefaults instantiates a new Summary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryWithDefaults() *Summary {
	this := Summary{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Summary) GetUser() UserSummary {
	if o == nil || o.User == nil {
		var ret UserSummary
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Summary) GetUserOk() (*UserSummary, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Summary) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserSummary and assigns it to the User field.
func (o *Summary) SetUser(v UserSummary) {
	o.User = &v
}

// GetOrganisations returns the Organisations field value if set, zero value otherwise.
func (o *Summary) GetOrganisations() []OrganisationSummary {
	if o == nil || o.Organisations == nil {
		var ret []OrganisationSummary
		return ret
	}
	return *o.Organisations
}

// GetOrganisationsOk returns a tuple with the Organisations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Summary) GetOrganisationsOk() (*[]OrganisationSummary, bool) {
	if o == nil || o.Organisations == nil {
		return nil, false
	}
	return o.Organisations, true
}

// HasOrganisations returns a boolean if a field has been set.
func (o *Summary) HasOrganisations() bool {
	if o != nil && o.Organisations != nil {
		return true
	}

	return false
}

// SetOrganisations gets a reference to the given []OrganisationSummary and assigns it to the Organisations field.
func (o *Summary) SetOrganisations(v []OrganisationSummary) {
	o.Organisations = &v
}

func (o Summary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Organisations != nil {
		toSerialize["organisations"] = o.Organisations
	}
	return json.Marshal(toSerialize)
}

type NullableSummary struct {
	value *Summary
	isSet bool
}

func (v NullableSummary) Get() *Summary {
	return v.value
}

func (v *NullableSummary) Set(val *Summary) {
	v.value = val
	v.isSet = true
}

func (v NullableSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummary(val *Summary) *NullableSummary {
	return &NullableSummary{value: val, isSet: true}
}

func (v NullableSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
