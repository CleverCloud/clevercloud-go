/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// WannabeBranch struct for WannabeBranch
type WannabeBranch struct {
	Branch *string `json:"branch,omitempty"`
}

// NewWannabeBranch instantiates a new WannabeBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWannabeBranch() *WannabeBranch {
	this := WannabeBranch{}
	return &this
}

// NewWannabeBranchWithDefaults instantiates a new WannabeBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWannabeBranchWithDefaults() *WannabeBranch {
	this := WannabeBranch{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *WannabeBranch) GetBranch() string {
	if o == nil || o.Branch == nil {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeBranch) GetBranchOk() (*string, bool) {
	if o == nil || o.Branch == nil {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *WannabeBranch) HasBranch() bool {
	if o != nil && o.Branch != nil {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *WannabeBranch) SetBranch(v string) {
	o.Branch = &v
}

func (o WannabeBranch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Branch != nil {
		toSerialize["branch"] = o.Branch
	}
	return json.Marshal(toSerialize)
}

type NullableWannabeBranch struct {
	value *WannabeBranch
	isSet bool
}

func (v NullableWannabeBranch) Get() *WannabeBranch {
	return v.value
}

func (v *NullableWannabeBranch) Set(val *WannabeBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableWannabeBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableWannabeBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWannabeBranch(val *WannabeBranch) *NullableWannabeBranch {
	return &NullableWannabeBranch{value: val, isSet: true}
}

func (v NullableWannabeBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWannabeBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
