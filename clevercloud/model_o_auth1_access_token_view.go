/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// OAuth1AccessTokenView struct for OAuth1AccessTokenView
type OAuth1AccessTokenView struct {
	Token           *string             `json:"token,omitempty"`
	Consumer        *OAuth1ConsumerView `json:"consumer,omitempty"`
	CreationDate    *int64              `json:"creationDate,omitempty"`
	LastUtilisation *int64              `json:"lastUtilisation,omitempty"`
	Rights          *OAuthRightsView    `json:"rights,omitempty"`
}

// NewOAuth1AccessTokenView instantiates a new OAuth1AccessTokenView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth1AccessTokenView() *OAuth1AccessTokenView {
	this := OAuth1AccessTokenView{}
	return &this
}

// NewOAuth1AccessTokenViewWithDefaults instantiates a new OAuth1AccessTokenView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuth1AccessTokenViewWithDefaults() *OAuth1AccessTokenView {
	this := OAuth1AccessTokenView{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *OAuth1AccessTokenView) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1AccessTokenView) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *OAuth1AccessTokenView) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *OAuth1AccessTokenView) SetToken(v string) {
	o.Token = &v
}

// GetConsumer returns the Consumer field value if set, zero value otherwise.
func (o *OAuth1AccessTokenView) GetConsumer() OAuth1ConsumerView {
	if o == nil || o.Consumer == nil {
		var ret OAuth1ConsumerView
		return ret
	}
	return *o.Consumer
}

// GetConsumerOk returns a tuple with the Consumer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1AccessTokenView) GetConsumerOk() (*OAuth1ConsumerView, bool) {
	if o == nil || o.Consumer == nil {
		return nil, false
	}
	return o.Consumer, true
}

// HasConsumer returns a boolean if a field has been set.
func (o *OAuth1AccessTokenView) HasConsumer() bool {
	if o != nil && o.Consumer != nil {
		return true
	}

	return false
}

// SetConsumer gets a reference to the given OAuth1ConsumerView and assigns it to the Consumer field.
func (o *OAuth1AccessTokenView) SetConsumer(v OAuth1ConsumerView) {
	o.Consumer = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *OAuth1AccessTokenView) GetCreationDate() int64 {
	if o == nil || o.CreationDate == nil {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1AccessTokenView) GetCreationDateOk() (*int64, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *OAuth1AccessTokenView) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *OAuth1AccessTokenView) SetCreationDate(v int64) {
	o.CreationDate = &v
}

// GetLastUtilisation returns the LastUtilisation field value if set, zero value otherwise.
func (o *OAuth1AccessTokenView) GetLastUtilisation() int64 {
	if o == nil || o.LastUtilisation == nil {
		var ret int64
		return ret
	}
	return *o.LastUtilisation
}

// GetLastUtilisationOk returns a tuple with the LastUtilisation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1AccessTokenView) GetLastUtilisationOk() (*int64, bool) {
	if o == nil || o.LastUtilisation == nil {
		return nil, false
	}
	return o.LastUtilisation, true
}

// HasLastUtilisation returns a boolean if a field has been set.
func (o *OAuth1AccessTokenView) HasLastUtilisation() bool {
	if o != nil && o.LastUtilisation != nil {
		return true
	}

	return false
}

// SetLastUtilisation gets a reference to the given int64 and assigns it to the LastUtilisation field.
func (o *OAuth1AccessTokenView) SetLastUtilisation(v int64) {
	o.LastUtilisation = &v
}

// GetRights returns the Rights field value if set, zero value otherwise.
func (o *OAuth1AccessTokenView) GetRights() OAuthRightsView {
	if o == nil || o.Rights == nil {
		var ret OAuthRightsView
		return ret
	}
	return *o.Rights
}

// GetRightsOk returns a tuple with the Rights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1AccessTokenView) GetRightsOk() (*OAuthRightsView, bool) {
	if o == nil || o.Rights == nil {
		return nil, false
	}
	return o.Rights, true
}

// HasRights returns a boolean if a field has been set.
func (o *OAuth1AccessTokenView) HasRights() bool {
	if o != nil && o.Rights != nil {
		return true
	}

	return false
}

// SetRights gets a reference to the given OAuthRightsView and assigns it to the Rights field.
func (o *OAuth1AccessTokenView) SetRights(v OAuthRightsView) {
	o.Rights = &v
}

func (o OAuth1AccessTokenView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.Consumer != nil {
		toSerialize["consumer"] = o.Consumer
	}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	if o.LastUtilisation != nil {
		toSerialize["lastUtilisation"] = o.LastUtilisation
	}
	if o.Rights != nil {
		toSerialize["rights"] = o.Rights
	}
	return json.Marshal(toSerialize)
}

type NullableOAuth1AccessTokenView struct {
	value *OAuth1AccessTokenView
	isSet bool
}

func (v NullableOAuth1AccessTokenView) Get() *OAuth1AccessTokenView {
	return v.value
}

func (v *NullableOAuth1AccessTokenView) Set(val *OAuth1AccessTokenView) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth1AccessTokenView) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth1AccessTokenView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth1AccessTokenView(val *OAuth1AccessTokenView) *NullableOAuth1AccessTokenView {
	return &NullableOAuth1AccessTokenView{value: val, isSet: true}
}

func (v NullableOAuth1AccessTokenView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth1AccessTokenView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
