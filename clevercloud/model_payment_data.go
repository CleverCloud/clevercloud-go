/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// PaymentData struct for PaymentData
type PaymentData struct {
	Type       *string `json:"type,omitempty"`
	Token      *string `json:"token,omitempty"`
	DeviceData *string `json:"deviceData,omitempty"`
}

// NewPaymentData instantiates a new PaymentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentData() *PaymentData {
	this := PaymentData{}
	return &this
}

// NewPaymentDataWithDefaults instantiates a new PaymentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentDataWithDefaults() *PaymentData {
	this := PaymentData{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentData) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentData) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PaymentData) SetType(v string) {
	o.Type = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PaymentData) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentData) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PaymentData) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PaymentData) SetToken(v string) {
	o.Token = &v
}

// GetDeviceData returns the DeviceData field value if set, zero value otherwise.
func (o *PaymentData) GetDeviceData() string {
	if o == nil || o.DeviceData == nil {
		var ret string
		return ret
	}
	return *o.DeviceData
}

// GetDeviceDataOk returns a tuple with the DeviceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentData) GetDeviceDataOk() (*string, bool) {
	if o == nil || o.DeviceData == nil {
		return nil, false
	}
	return o.DeviceData, true
}

// HasDeviceData returns a boolean if a field has been set.
func (o *PaymentData) HasDeviceData() bool {
	if o != nil && o.DeviceData != nil {
		return true
	}

	return false
}

// SetDeviceData gets a reference to the given string and assigns it to the DeviceData field.
func (o *PaymentData) SetDeviceData(v string) {
	o.DeviceData = &v
}

func (o PaymentData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.DeviceData != nil {
		toSerialize["deviceData"] = o.DeviceData
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentData struct {
	value *PaymentData
	isSet bool
}

func (v NullablePaymentData) Get() *PaymentData {
	return v.value
}

func (v *NullablePaymentData) Set(val *PaymentData) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentData) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentData(val *PaymentData) *NullablePaymentData {
	return &NullablePaymentData{value: val, isSet: true}
}

func (v NullablePaymentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
