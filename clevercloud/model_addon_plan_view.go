/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// AddonPlanView struct for AddonPlanView
type AddonPlanView struct {
	Id       *string                     `json:"id,omitempty"`
	Name     *string                     `json:"name,omitempty"`
	Slug     *string                     `json:"slug,omitempty"`
	Price    *float32                    `json:"price,omitempty"`
	PriceId  *string                     `json:"price_id,omitempty"`
	Features *[]AddonFeatureInstanceView `json:"features,omitempty"`
	Zones    *[]string                   `json:"zones,omitempty"`
}

// NewAddonPlanView instantiates a new AddonPlanView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonPlanView() *AddonPlanView {
	this := AddonPlanView{}
	return &this
}

// NewAddonPlanViewWithDefaults instantiates a new AddonPlanView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonPlanViewWithDefaults() *AddonPlanView {
	this := AddonPlanView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddonPlanView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonPlanView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddonPlanView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddonPlanView) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddonPlanView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonPlanView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AddonPlanView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddonPlanView) SetName(v string) {
	o.Name = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *AddonPlanView) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonPlanView) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *AddonPlanView) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *AddonPlanView) SetSlug(v string) {
	o.Slug = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *AddonPlanView) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonPlanView) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *AddonPlanView) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *AddonPlanView) SetPrice(v float32) {
	o.Price = &v
}

// GetPriceId returns the PriceId field value if set, zero value otherwise.
func (o *AddonPlanView) GetPriceId() string {
	if o == nil || o.PriceId == nil {
		var ret string
		return ret
	}
	return *o.PriceId
}

// GetPriceIdOk returns a tuple with the PriceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonPlanView) GetPriceIdOk() (*string, bool) {
	if o == nil || o.PriceId == nil {
		return nil, false
	}
	return o.PriceId, true
}

// HasPriceId returns a boolean if a field has been set.
func (o *AddonPlanView) HasPriceId() bool {
	if o != nil && o.PriceId != nil {
		return true
	}

	return false
}

// SetPriceId gets a reference to the given string and assigns it to the PriceId field.
func (o *AddonPlanView) SetPriceId(v string) {
	o.PriceId = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *AddonPlanView) GetFeatures() []AddonFeatureInstanceView {
	if o == nil || o.Features == nil {
		var ret []AddonFeatureInstanceView
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonPlanView) GetFeaturesOk() (*[]AddonFeatureInstanceView, bool) {
	if o == nil || o.Features == nil {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *AddonPlanView) HasFeatures() bool {
	if o != nil && o.Features != nil {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []AddonFeatureInstanceView and assigns it to the Features field.
func (o *AddonPlanView) SetFeatures(v []AddonFeatureInstanceView) {
	o.Features = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *AddonPlanView) GetZones() []string {
	if o == nil || o.Zones == nil {
		var ret []string
		return ret
	}
	return *o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonPlanView) GetZonesOk() (*[]string, bool) {
	if o == nil || o.Zones == nil {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *AddonPlanView) HasZones() bool {
	if o != nil && o.Zones != nil {
		return true
	}

	return false
}

// SetZones gets a reference to the given []string and assigns it to the Zones field.
func (o *AddonPlanView) SetZones(v []string) {
	o.Zones = &v
}

func (o AddonPlanView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.PriceId != nil {
		toSerialize["price_id"] = o.PriceId
	}
	if o.Features != nil {
		toSerialize["features"] = o.Features
	}
	if o.Zones != nil {
		toSerialize["zones"] = o.Zones
	}
	return json.Marshal(toSerialize)
}

type NullableAddonPlanView struct {
	value *AddonPlanView
	isSet bool
}

func (v NullableAddonPlanView) Get() *AddonPlanView {
	return v.value
}

func (v *NullableAddonPlanView) Set(val *AddonPlanView) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonPlanView) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonPlanView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonPlanView(val *AddonPlanView) *NullableAddonPlanView {
	return &NullableAddonPlanView{value: val, isSet: true}
}

func (v NullableAddonPlanView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonPlanView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
