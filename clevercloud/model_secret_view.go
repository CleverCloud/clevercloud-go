/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// SecretView struct for SecretView
type SecretView struct {
	Secret *string `json:"secret,omitempty"`
}

// NewSecretView instantiates a new SecretView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretView() *SecretView {
	this := SecretView{}
	return &this
}

// NewSecretViewWithDefaults instantiates a new SecretView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretViewWithDefaults() *SecretView {
	this := SecretView{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *SecretView) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretView) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *SecretView) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *SecretView) SetSecret(v string) {
	o.Secret = &v
}

func (o SecretView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableSecretView struct {
	value *SecretView
	isSet bool
}

func (v NullableSecretView) Get() *SecretView {
	return v.value
}

func (v *NullableSecretView) Set(val *SecretView) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretView) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretView(val *SecretView) *NullableSecretView {
	return &NullableSecretView{value: val, isSet: true}
}

func (v NullableSecretView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
