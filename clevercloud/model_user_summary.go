/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// UserSummary struct for UserSummary
type UserSummary struct {
	Id           *string                  `json:"id,omitempty"`
	Name         *string                  `json:"name,omitempty"`
	Avatar       *string                  `json:"avatar,omitempty"`
	Applications *[]ApplicationSummary    `json:"applications,omitempty"`
	Addons       *[]AddonSummary          `json:"addons,omitempty"`
	Consumers    *[]OAuth1ConsumerSummary `json:"consumers,omitempty"`
	Lang         *string                  `json:"lang,omitempty"`
	Admin        *bool                    `json:"admin,omitempty"`
	CanSEPA      *bool                    `json:"canSEPA,omitempty"`
}

// NewUserSummary instantiates a new UserSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSummary() *UserSummary {
	this := UserSummary{}
	return &this
}

// NewUserSummaryWithDefaults instantiates a new UserSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSummaryWithDefaults() *UserSummary {
	this := UserSummary{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserSummary) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserSummary) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserSummary) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserSummary) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserSummary) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserSummary) SetName(v string) {
	o.Name = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *UserSummary) GetAvatar() string {
	if o == nil || o.Avatar == nil {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetAvatarOk() (*string, bool) {
	if o == nil || o.Avatar == nil {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *UserSummary) HasAvatar() bool {
	if o != nil && o.Avatar != nil {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *UserSummary) SetAvatar(v string) {
	o.Avatar = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise.
func (o *UserSummary) GetApplications() []ApplicationSummary {
	if o == nil || o.Applications == nil {
		var ret []ApplicationSummary
		return ret
	}
	return *o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetApplicationsOk() (*[]ApplicationSummary, bool) {
	if o == nil || o.Applications == nil {
		return nil, false
	}
	return o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *UserSummary) HasApplications() bool {
	if o != nil && o.Applications != nil {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []ApplicationSummary and assigns it to the Applications field.
func (o *UserSummary) SetApplications(v []ApplicationSummary) {
	o.Applications = &v
}

// GetAddons returns the Addons field value if set, zero value otherwise.
func (o *UserSummary) GetAddons() []AddonSummary {
	if o == nil || o.Addons == nil {
		var ret []AddonSummary
		return ret
	}
	return *o.Addons
}

// GetAddonsOk returns a tuple with the Addons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetAddonsOk() (*[]AddonSummary, bool) {
	if o == nil || o.Addons == nil {
		return nil, false
	}
	return o.Addons, true
}

// HasAddons returns a boolean if a field has been set.
func (o *UserSummary) HasAddons() bool {
	if o != nil && o.Addons != nil {
		return true
	}

	return false
}

// SetAddons gets a reference to the given []AddonSummary and assigns it to the Addons field.
func (o *UserSummary) SetAddons(v []AddonSummary) {
	o.Addons = &v
}

// GetConsumers returns the Consumers field value if set, zero value otherwise.
func (o *UserSummary) GetConsumers() []OAuth1ConsumerSummary {
	if o == nil || o.Consumers == nil {
		var ret []OAuth1ConsumerSummary
		return ret
	}
	return *o.Consumers
}

// GetConsumersOk returns a tuple with the Consumers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetConsumersOk() (*[]OAuth1ConsumerSummary, bool) {
	if o == nil || o.Consumers == nil {
		return nil, false
	}
	return o.Consumers, true
}

// HasConsumers returns a boolean if a field has been set.
func (o *UserSummary) HasConsumers() bool {
	if o != nil && o.Consumers != nil {
		return true
	}

	return false
}

// SetConsumers gets a reference to the given []OAuth1ConsumerSummary and assigns it to the Consumers field.
func (o *UserSummary) SetConsumers(v []OAuth1ConsumerSummary) {
	o.Consumers = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *UserSummary) GetLang() string {
	if o == nil || o.Lang == nil {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetLangOk() (*string, bool) {
	if o == nil || o.Lang == nil {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *UserSummary) HasLang() bool {
	if o != nil && o.Lang != nil {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *UserSummary) SetLang(v string) {
	o.Lang = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *UserSummary) GetAdmin() bool {
	if o == nil || o.Admin == nil {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetAdminOk() (*bool, bool) {
	if o == nil || o.Admin == nil {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *UserSummary) HasAdmin() bool {
	if o != nil && o.Admin != nil {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *UserSummary) SetAdmin(v bool) {
	o.Admin = &v
}

// GetCanSEPA returns the CanSEPA field value if set, zero value otherwise.
func (o *UserSummary) GetCanSEPA() bool {
	if o == nil || o.CanSEPA == nil {
		var ret bool
		return ret
	}
	return *o.CanSEPA
}

// GetCanSEPAOk returns a tuple with the CanSEPA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetCanSEPAOk() (*bool, bool) {
	if o == nil || o.CanSEPA == nil {
		return nil, false
	}
	return o.CanSEPA, true
}

// HasCanSEPA returns a boolean if a field has been set.
func (o *UserSummary) HasCanSEPA() bool {
	if o != nil && o.CanSEPA != nil {
		return true
	}

	return false
}

// SetCanSEPA gets a reference to the given bool and assigns it to the CanSEPA field.
func (o *UserSummary) SetCanSEPA(v bool) {
	o.CanSEPA = &v
}

func (o UserSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Avatar != nil {
		toSerialize["avatar"] = o.Avatar
	}
	if o.Applications != nil {
		toSerialize["applications"] = o.Applications
	}
	if o.Addons != nil {
		toSerialize["addons"] = o.Addons
	}
	if o.Consumers != nil {
		toSerialize["consumers"] = o.Consumers
	}
	if o.Lang != nil {
		toSerialize["lang"] = o.Lang
	}
	if o.Admin != nil {
		toSerialize["admin"] = o.Admin
	}
	if o.CanSEPA != nil {
		toSerialize["canSEPA"] = o.CanSEPA
	}
	return json.Marshal(toSerialize)
}

type NullableUserSummary struct {
	value *UserSummary
	isSet bool
}

func (v NullableUserSummary) Get() *UserSummary {
	return v.value
}

func (v *NullableUserSummary) Set(val *UserSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSummary(val *UserSummary) *NullableUserSummary {
	return &NullableUserSummary{value: val, isSet: true}
}

func (v NullableUserSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
