/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// ApplicationView struct for ApplicationView
type ApplicationView struct {
	Id             *string             `json:"id,omitempty"`
	Name           *string             `json:"name,omitempty"`
	Description    *string             `json:"description,omitempty"`
	Zone           *string             `json:"zone,omitempty"`
	Instance       *InstanceView       `json:"instance,omitempty"`
	Deployment     *DeploymentInfoView `json:"deployment,omitempty"`
	Vhosts         *[]VhostView        `json:"vhosts,omitempty"`
	CreationDate   *int64              `json:"creationDate,omitempty"`
	LastDeploy     *int32              `json:"last_deploy,omitempty"`
	Archived       *bool               `json:"archived,omitempty"`
	StickySessions *bool               `json:"stickySessions,omitempty"`
	Homogeneous    *bool               `json:"homogeneous,omitempty"`
	Favourite      *bool               `json:"favourite,omitempty"`
	CancelOnPush   *bool               `json:"cancelOnPush,omitempty"`
	WebhookUrl     *string             `json:"webhookUrl,omitempty"`
	WebhookSecret  *string             `json:"webhookSecret,omitempty"`
	SeparateBuild  *bool               `json:"separateBuild,omitempty"`
	BuildFlavor    *FlavorView         `json:"buildFlavor,omitempty"`
	OwnerId        *string             `json:"ownerId,omitempty"`
	State          *string             `json:"state,omitempty"`
	CommitId       *string             `json:"commitId,omitempty"`
	Appliance      *string             `json:"appliance,omitempty"`
	Branch         *string             `json:"branch,omitempty"`
	ForceHttps     *string             `json:"forceHttps,omitempty"`
	DeployUrl      *string             `json:"deployUrl,omitempty"`
}

// NewApplicationView instantiates a new ApplicationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationView() *ApplicationView {
	this := ApplicationView{}
	return &this
}

// NewApplicationViewWithDefaults instantiates a new ApplicationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationViewWithDefaults() *ApplicationView {
	this := ApplicationView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationView) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplicationView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplicationView) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplicationView) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplicationView) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplicationView) SetDescription(v string) {
	o.Description = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *ApplicationView) GetZone() string {
	if o == nil || o.Zone == nil {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetZoneOk() (*string, bool) {
	if o == nil || o.Zone == nil {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *ApplicationView) HasZone() bool {
	if o != nil && o.Zone != nil {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *ApplicationView) SetZone(v string) {
	o.Zone = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *ApplicationView) GetInstance() InstanceView {
	if o == nil || o.Instance == nil {
		var ret InstanceView
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetInstanceOk() (*InstanceView, bool) {
	if o == nil || o.Instance == nil {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *ApplicationView) HasInstance() bool {
	if o != nil && o.Instance != nil {
		return true
	}

	return false
}

// SetInstance gets a reference to the given InstanceView and assigns it to the Instance field.
func (o *ApplicationView) SetInstance(v InstanceView) {
	o.Instance = &v
}

// GetDeployment returns the Deployment field value if set, zero value otherwise.
func (o *ApplicationView) GetDeployment() DeploymentInfoView {
	if o == nil || o.Deployment == nil {
		var ret DeploymentInfoView
		return ret
	}
	return *o.Deployment
}

// GetDeploymentOk returns a tuple with the Deployment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetDeploymentOk() (*DeploymentInfoView, bool) {
	if o == nil || o.Deployment == nil {
		return nil, false
	}
	return o.Deployment, true
}

// HasDeployment returns a boolean if a field has been set.
func (o *ApplicationView) HasDeployment() bool {
	if o != nil && o.Deployment != nil {
		return true
	}

	return false
}

// SetDeployment gets a reference to the given DeploymentInfoView and assigns it to the Deployment field.
func (o *ApplicationView) SetDeployment(v DeploymentInfoView) {
	o.Deployment = &v
}

// GetVhosts returns the Vhosts field value if set, zero value otherwise.
func (o *ApplicationView) GetVhosts() []VhostView {
	if o == nil || o.Vhosts == nil {
		var ret []VhostView
		return ret
	}
	return *o.Vhosts
}

// GetVhostsOk returns a tuple with the Vhosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetVhostsOk() (*[]VhostView, bool) {
	if o == nil || o.Vhosts == nil {
		return nil, false
	}
	return o.Vhosts, true
}

// HasVhosts returns a boolean if a field has been set.
func (o *ApplicationView) HasVhosts() bool {
	if o != nil && o.Vhosts != nil {
		return true
	}

	return false
}

// SetVhosts gets a reference to the given []VhostView and assigns it to the Vhosts field.
func (o *ApplicationView) SetVhosts(v []VhostView) {
	o.Vhosts = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *ApplicationView) GetCreationDate() int64 {
	if o == nil || o.CreationDate == nil {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetCreationDateOk() (*int64, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *ApplicationView) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *ApplicationView) SetCreationDate(v int64) {
	o.CreationDate = &v
}

// GetLastDeploy returns the LastDeploy field value if set, zero value otherwise.
func (o *ApplicationView) GetLastDeploy() int32 {
	if o == nil || o.LastDeploy == nil {
		var ret int32
		return ret
	}
	return *o.LastDeploy
}

// GetLastDeployOk returns a tuple with the LastDeploy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetLastDeployOk() (*int32, bool) {
	if o == nil || o.LastDeploy == nil {
		return nil, false
	}
	return o.LastDeploy, true
}

// HasLastDeploy returns a boolean if a field has been set.
func (o *ApplicationView) HasLastDeploy() bool {
	if o != nil && o.LastDeploy != nil {
		return true
	}

	return false
}

// SetLastDeploy gets a reference to the given int32 and assigns it to the LastDeploy field.
func (o *ApplicationView) SetLastDeploy(v int32) {
	o.LastDeploy = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *ApplicationView) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *ApplicationView) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *ApplicationView) SetArchived(v bool) {
	o.Archived = &v
}

// GetStickySessions returns the StickySessions field value if set, zero value otherwise.
func (o *ApplicationView) GetStickySessions() bool {
	if o == nil || o.StickySessions == nil {
		var ret bool
		return ret
	}
	return *o.StickySessions
}

// GetStickySessionsOk returns a tuple with the StickySessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetStickySessionsOk() (*bool, bool) {
	if o == nil || o.StickySessions == nil {
		return nil, false
	}
	return o.StickySessions, true
}

// HasStickySessions returns a boolean if a field has been set.
func (o *ApplicationView) HasStickySessions() bool {
	if o != nil && o.StickySessions != nil {
		return true
	}

	return false
}

// SetStickySessions gets a reference to the given bool and assigns it to the StickySessions field.
func (o *ApplicationView) SetStickySessions(v bool) {
	o.StickySessions = &v
}

// GetHomogeneous returns the Homogeneous field value if set, zero value otherwise.
func (o *ApplicationView) GetHomogeneous() bool {
	if o == nil || o.Homogeneous == nil {
		var ret bool
		return ret
	}
	return *o.Homogeneous
}

// GetHomogeneousOk returns a tuple with the Homogeneous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetHomogeneousOk() (*bool, bool) {
	if o == nil || o.Homogeneous == nil {
		return nil, false
	}
	return o.Homogeneous, true
}

// HasHomogeneous returns a boolean if a field has been set.
func (o *ApplicationView) HasHomogeneous() bool {
	if o != nil && o.Homogeneous != nil {
		return true
	}

	return false
}

// SetHomogeneous gets a reference to the given bool and assigns it to the Homogeneous field.
func (o *ApplicationView) SetHomogeneous(v bool) {
	o.Homogeneous = &v
}

// GetFavourite returns the Favourite field value if set, zero value otherwise.
func (o *ApplicationView) GetFavourite() bool {
	if o == nil || o.Favourite == nil {
		var ret bool
		return ret
	}
	return *o.Favourite
}

// GetFavouriteOk returns a tuple with the Favourite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetFavouriteOk() (*bool, bool) {
	if o == nil || o.Favourite == nil {
		return nil, false
	}
	return o.Favourite, true
}

// HasFavourite returns a boolean if a field has been set.
func (o *ApplicationView) HasFavourite() bool {
	if o != nil && o.Favourite != nil {
		return true
	}

	return false
}

// SetFavourite gets a reference to the given bool and assigns it to the Favourite field.
func (o *ApplicationView) SetFavourite(v bool) {
	o.Favourite = &v
}

// GetCancelOnPush returns the CancelOnPush field value if set, zero value otherwise.
func (o *ApplicationView) GetCancelOnPush() bool {
	if o == nil || o.CancelOnPush == nil {
		var ret bool
		return ret
	}
	return *o.CancelOnPush
}

// GetCancelOnPushOk returns a tuple with the CancelOnPush field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetCancelOnPushOk() (*bool, bool) {
	if o == nil || o.CancelOnPush == nil {
		return nil, false
	}
	return o.CancelOnPush, true
}

// HasCancelOnPush returns a boolean if a field has been set.
func (o *ApplicationView) HasCancelOnPush() bool {
	if o != nil && o.CancelOnPush != nil {
		return true
	}

	return false
}

// SetCancelOnPush gets a reference to the given bool and assigns it to the CancelOnPush field.
func (o *ApplicationView) SetCancelOnPush(v bool) {
	o.CancelOnPush = &v
}

// GetWebhookUrl returns the WebhookUrl field value if set, zero value otherwise.
func (o *ApplicationView) GetWebhookUrl() string {
	if o == nil || o.WebhookUrl == nil {
		var ret string
		return ret
	}
	return *o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetWebhookUrlOk() (*string, bool) {
	if o == nil || o.WebhookUrl == nil {
		return nil, false
	}
	return o.WebhookUrl, true
}

// HasWebhookUrl returns a boolean if a field has been set.
func (o *ApplicationView) HasWebhookUrl() bool {
	if o != nil && o.WebhookUrl != nil {
		return true
	}

	return false
}

// SetWebhookUrl gets a reference to the given string and assigns it to the WebhookUrl field.
func (o *ApplicationView) SetWebhookUrl(v string) {
	o.WebhookUrl = &v
}

// GetWebhookSecret returns the WebhookSecret field value if set, zero value otherwise.
func (o *ApplicationView) GetWebhookSecret() string {
	if o == nil || o.WebhookSecret == nil {
		var ret string
		return ret
	}
	return *o.WebhookSecret
}

// GetWebhookSecretOk returns a tuple with the WebhookSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetWebhookSecretOk() (*string, bool) {
	if o == nil || o.WebhookSecret == nil {
		return nil, false
	}
	return o.WebhookSecret, true
}

// HasWebhookSecret returns a boolean if a field has been set.
func (o *ApplicationView) HasWebhookSecret() bool {
	if o != nil && o.WebhookSecret != nil {
		return true
	}

	return false
}

// SetWebhookSecret gets a reference to the given string and assigns it to the WebhookSecret field.
func (o *ApplicationView) SetWebhookSecret(v string) {
	o.WebhookSecret = &v
}

// GetSeparateBuild returns the SeparateBuild field value if set, zero value otherwise.
func (o *ApplicationView) GetSeparateBuild() bool {
	if o == nil || o.SeparateBuild == nil {
		var ret bool
		return ret
	}
	return *o.SeparateBuild
}

// GetSeparateBuildOk returns a tuple with the SeparateBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetSeparateBuildOk() (*bool, bool) {
	if o == nil || o.SeparateBuild == nil {
		return nil, false
	}
	return o.SeparateBuild, true
}

// HasSeparateBuild returns a boolean if a field has been set.
func (o *ApplicationView) HasSeparateBuild() bool {
	if o != nil && o.SeparateBuild != nil {
		return true
	}

	return false
}

// SetSeparateBuild gets a reference to the given bool and assigns it to the SeparateBuild field.
func (o *ApplicationView) SetSeparateBuild(v bool) {
	o.SeparateBuild = &v
}

// GetBuildFlavor returns the BuildFlavor field value if set, zero value otherwise.
func (o *ApplicationView) GetBuildFlavor() FlavorView {
	if o == nil || o.BuildFlavor == nil {
		var ret FlavorView
		return ret
	}
	return *o.BuildFlavor
}

// GetBuildFlavorOk returns a tuple with the BuildFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetBuildFlavorOk() (*FlavorView, bool) {
	if o == nil || o.BuildFlavor == nil {
		return nil, false
	}
	return o.BuildFlavor, true
}

// HasBuildFlavor returns a boolean if a field has been set.
func (o *ApplicationView) HasBuildFlavor() bool {
	if o != nil && o.BuildFlavor != nil {
		return true
	}

	return false
}

// SetBuildFlavor gets a reference to the given FlavorView and assigns it to the BuildFlavor field.
func (o *ApplicationView) SetBuildFlavor(v FlavorView) {
	o.BuildFlavor = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *ApplicationView) GetOwnerId() string {
	if o == nil || o.OwnerId == nil {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetOwnerIdOk() (*string, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *ApplicationView) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *ApplicationView) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ApplicationView) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ApplicationView) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ApplicationView) SetState(v string) {
	o.State = &v
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *ApplicationView) GetCommitId() string {
	if o == nil || o.CommitId == nil {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetCommitIdOk() (*string, bool) {
	if o == nil || o.CommitId == nil {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *ApplicationView) HasCommitId() bool {
	if o != nil && o.CommitId != nil {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *ApplicationView) SetCommitId(v string) {
	o.CommitId = &v
}

// GetAppliance returns the Appliance field value if set, zero value otherwise.
func (o *ApplicationView) GetAppliance() string {
	if o == nil || o.Appliance == nil {
		var ret string
		return ret
	}
	return *o.Appliance
}

// GetApplianceOk returns a tuple with the Appliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetApplianceOk() (*string, bool) {
	if o == nil || o.Appliance == nil {
		return nil, false
	}
	return o.Appliance, true
}

// HasAppliance returns a boolean if a field has been set.
func (o *ApplicationView) HasAppliance() bool {
	if o != nil && o.Appliance != nil {
		return true
	}

	return false
}

// SetAppliance gets a reference to the given string and assigns it to the Appliance field.
func (o *ApplicationView) SetAppliance(v string) {
	o.Appliance = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *ApplicationView) GetBranch() string {
	if o == nil || o.Branch == nil {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetBranchOk() (*string, bool) {
	if o == nil || o.Branch == nil {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *ApplicationView) HasBranch() bool {
	if o != nil && o.Branch != nil {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *ApplicationView) SetBranch(v string) {
	o.Branch = &v
}

// GetForceHttps returns the ForceHttps field value if set, zero value otherwise.
func (o *ApplicationView) GetForceHttps() string {
	if o == nil || o.ForceHttps == nil {
		var ret string
		return ret
	}
	return *o.ForceHttps
}

// GetForceHttpsOk returns a tuple with the ForceHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetForceHttpsOk() (*string, bool) {
	if o == nil || o.ForceHttps == nil {
		return nil, false
	}
	return o.ForceHttps, true
}

// HasForceHttps returns a boolean if a field has been set.
func (o *ApplicationView) HasForceHttps() bool {
	if o != nil && o.ForceHttps != nil {
		return true
	}

	return false
}

// SetForceHttps gets a reference to the given string and assigns it to the ForceHttps field.
func (o *ApplicationView) SetForceHttps(v string) {
	o.ForceHttps = &v
}

// GetDeployUrl returns the DeployUrl field value if set, zero value otherwise.
func (o *ApplicationView) GetDeployUrl() string {
	if o == nil || o.DeployUrl == nil {
		var ret string
		return ret
	}
	return *o.DeployUrl
}

// GetDeployUrlOk returns a tuple with the DeployUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationView) GetDeployUrlOk() (*string, bool) {
	if o == nil || o.DeployUrl == nil {
		return nil, false
	}
	return o.DeployUrl, true
}

// HasDeployUrl returns a boolean if a field has been set.
func (o *ApplicationView) HasDeployUrl() bool {
	if o != nil && o.DeployUrl != nil {
		return true
	}

	return false
}

// SetDeployUrl gets a reference to the given string and assigns it to the DeployUrl field.
func (o *ApplicationView) SetDeployUrl(v string) {
	o.DeployUrl = &v
}

func (o ApplicationView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Zone != nil {
		toSerialize["zone"] = o.Zone
	}
	if o.Instance != nil {
		toSerialize["instance"] = o.Instance
	}
	if o.Deployment != nil {
		toSerialize["deployment"] = o.Deployment
	}
	if o.Vhosts != nil {
		toSerialize["vhosts"] = o.Vhosts
	}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	if o.LastDeploy != nil {
		toSerialize["last_deploy"] = o.LastDeploy
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.StickySessions != nil {
		toSerialize["stickySessions"] = o.StickySessions
	}
	if o.Homogeneous != nil {
		toSerialize["homogeneous"] = o.Homogeneous
	}
	if o.Favourite != nil {
		toSerialize["favourite"] = o.Favourite
	}
	if o.CancelOnPush != nil {
		toSerialize["cancelOnPush"] = o.CancelOnPush
	}
	if o.WebhookUrl != nil {
		toSerialize["webhookUrl"] = o.WebhookUrl
	}
	if o.WebhookSecret != nil {
		toSerialize["webhookSecret"] = o.WebhookSecret
	}
	if o.SeparateBuild != nil {
		toSerialize["separateBuild"] = o.SeparateBuild
	}
	if o.BuildFlavor != nil {
		toSerialize["buildFlavor"] = o.BuildFlavor
	}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.CommitId != nil {
		toSerialize["commitId"] = o.CommitId
	}
	if o.Appliance != nil {
		toSerialize["appliance"] = o.Appliance
	}
	if o.Branch != nil {
		toSerialize["branch"] = o.Branch
	}
	if o.ForceHttps != nil {
		toSerialize["forceHttps"] = o.ForceHttps
	}
	if o.DeployUrl != nil {
		toSerialize["deployUrl"] = o.DeployUrl
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationView struct {
	value *ApplicationView
	isSet bool
}

func (v NullableApplicationView) Get() *ApplicationView {
	return v.value
}

func (v *NullableApplicationView) Set(val *ApplicationView) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationView) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationView(val *ApplicationView) *NullableApplicationView {
	return &NullableApplicationView{value: val, isSet: true}
}

func (v NullableApplicationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
