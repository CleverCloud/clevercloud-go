/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// WannabePlanChange struct for WannabePlanChange
type WannabePlanChange struct {
	PlanId  *string `json:"planId,omitempty"`
	Region  *string `json:"region,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewWannabePlanChange instantiates a new WannabePlanChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWannabePlanChange() *WannabePlanChange {
	this := WannabePlanChange{}
	return &this
}

// NewWannabePlanChangeWithDefaults instantiates a new WannabePlanChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWannabePlanChangeWithDefaults() *WannabePlanChange {
	this := WannabePlanChange{}
	return &this
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *WannabePlanChange) GetPlanId() string {
	if o == nil || o.PlanId == nil {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabePlanChange) GetPlanIdOk() (*string, bool) {
	if o == nil || o.PlanId == nil {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *WannabePlanChange) HasPlanId() bool {
	if o != nil && o.PlanId != nil {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *WannabePlanChange) SetPlanId(v string) {
	o.PlanId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *WannabePlanChange) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabePlanChange) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *WannabePlanChange) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *WannabePlanChange) SetRegion(v string) {
	o.Region = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *WannabePlanChange) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabePlanChange) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *WannabePlanChange) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *WannabePlanChange) SetVersion(v string) {
	o.Version = &v
}

func (o WannabePlanChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PlanId != nil {
		toSerialize["planId"] = o.PlanId
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableWannabePlanChange struct {
	value *WannabePlanChange
	isSet bool
}

func (v NullableWannabePlanChange) Get() *WannabePlanChange {
	return v.value
}

func (v *NullableWannabePlanChange) Set(val *WannabePlanChange) {
	v.value = val
	v.isSet = true
}

func (v NullableWannabePlanChange) IsSet() bool {
	return v.isSet
}

func (v *NullableWannabePlanChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWannabePlanChange(val *WannabePlanChange) *NullableWannabePlanChange {
	return &NullableWannabePlanChange{value: val, isSet: true}
}

func (v NullableWannabePlanChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWannabePlanChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
