/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// InstanceVariantView struct for InstanceVariantView
type InstanceVariantView struct {
	Id         *string `json:"id,omitempty"`
	Slug       *string `json:"slug,omitempty"`
	Name       *string `json:"name,omitempty"`
	DeployType *string `json:"deployType,omitempty"`
	Logo       *string `json:"logo,omitempty"`
}

// NewInstanceVariantView instantiates a new InstanceVariantView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceVariantView() *InstanceVariantView {
	this := InstanceVariantView{}
	return &this
}

// NewInstanceVariantViewWithDefaults instantiates a new InstanceVariantView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceVariantViewWithDefaults() *InstanceVariantView {
	this := InstanceVariantView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceVariantView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceVariantView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstanceVariantView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InstanceVariantView) SetId(v string) {
	o.Id = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *InstanceVariantView) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceVariantView) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *InstanceVariantView) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *InstanceVariantView) SetSlug(v string) {
	o.Slug = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstanceVariantView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceVariantView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstanceVariantView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstanceVariantView) SetName(v string) {
	o.Name = &v
}

// GetDeployType returns the DeployType field value if set, zero value otherwise.
func (o *InstanceVariantView) GetDeployType() string {
	if o == nil || o.DeployType == nil {
		var ret string
		return ret
	}
	return *o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceVariantView) GetDeployTypeOk() (*string, bool) {
	if o == nil || o.DeployType == nil {
		return nil, false
	}
	return o.DeployType, true
}

// HasDeployType returns a boolean if a field has been set.
func (o *InstanceVariantView) HasDeployType() bool {
	if o != nil && o.DeployType != nil {
		return true
	}

	return false
}

// SetDeployType gets a reference to the given string and assigns it to the DeployType field.
func (o *InstanceVariantView) SetDeployType(v string) {
	o.DeployType = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *InstanceVariantView) GetLogo() string {
	if o == nil || o.Logo == nil {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceVariantView) GetLogoOk() (*string, bool) {
	if o == nil || o.Logo == nil {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *InstanceVariantView) HasLogo() bool {
	if o != nil && o.Logo != nil {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *InstanceVariantView) SetLogo(v string) {
	o.Logo = &v
}

func (o InstanceVariantView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DeployType != nil {
		toSerialize["deployType"] = o.DeployType
	}
	if o.Logo != nil {
		toSerialize["logo"] = o.Logo
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceVariantView struct {
	value *InstanceVariantView
	isSet bool
}

func (v NullableInstanceVariantView) Get() *InstanceVariantView {
	return v.value
}

func (v *NullableInstanceVariantView) Set(val *InstanceVariantView) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceVariantView) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceVariantView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceVariantView(val *InstanceVariantView) *NullableInstanceVariantView {
	return &NullableInstanceVariantView{value: val, isSet: true}
}

func (v NullableInstanceVariantView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceVariantView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
