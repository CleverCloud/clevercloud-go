/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// PaymentInfoView struct for PaymentInfoView
type PaymentInfoView struct {
	FromOrga  *bool              `json:"fromOrga,omitempty"`
	Name      *string            `json:"name,omitempty"`
	Company   *string            `json:"company,omitempty"`
	Address   *string            `json:"address,omitempty"`
	ZipCode   *string            `json:"zipCode,omitempty"`
	City      *string            `json:"city,omitempty"`
	Country   *string            `json:"country,omitempty"`
	VatNumber *string            `json:"vatNumber,omitempty"`
	Errors    *map[string]string `json:"errors,omitempty"`
}

// NewPaymentInfoView instantiates a new PaymentInfoView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentInfoView() *PaymentInfoView {
	this := PaymentInfoView{}
	return &this
}

// NewPaymentInfoViewWithDefaults instantiates a new PaymentInfoView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentInfoViewWithDefaults() *PaymentInfoView {
	this := PaymentInfoView{}
	return &this
}

// GetFromOrga returns the FromOrga field value if set, zero value otherwise.
func (o *PaymentInfoView) GetFromOrga() bool {
	if o == nil || o.FromOrga == nil {
		var ret bool
		return ret
	}
	return *o.FromOrga
}

// GetFromOrgaOk returns a tuple with the FromOrga field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoView) GetFromOrgaOk() (*bool, bool) {
	if o == nil || o.FromOrga == nil {
		return nil, false
	}
	return o.FromOrga, true
}

// HasFromOrga returns a boolean if a field has been set.
func (o *PaymentInfoView) HasFromOrga() bool {
	if o != nil && o.FromOrga != nil {
		return true
	}

	return false
}

// SetFromOrga gets a reference to the given bool and assigns it to the FromOrga field.
func (o *PaymentInfoView) SetFromOrga(v bool) {
	o.FromOrga = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PaymentInfoView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PaymentInfoView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PaymentInfoView) SetName(v string) {
	o.Name = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *PaymentInfoView) GetCompany() string {
	if o == nil || o.Company == nil {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoView) GetCompanyOk() (*string, bool) {
	if o == nil || o.Company == nil {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *PaymentInfoView) HasCompany() bool {
	if o != nil && o.Company != nil {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *PaymentInfoView) SetCompany(v string) {
	o.Company = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PaymentInfoView) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoView) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PaymentInfoView) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *PaymentInfoView) SetAddress(v string) {
	o.Address = &v
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *PaymentInfoView) GetZipCode() string {
	if o == nil || o.ZipCode == nil {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoView) GetZipCodeOk() (*string, bool) {
	if o == nil || o.ZipCode == nil {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *PaymentInfoView) HasZipCode() bool {
	if o != nil && o.ZipCode != nil {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *PaymentInfoView) SetZipCode(v string) {
	o.ZipCode = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *PaymentInfoView) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoView) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *PaymentInfoView) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *PaymentInfoView) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PaymentInfoView) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoView) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PaymentInfoView) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PaymentInfoView) SetCountry(v string) {
	o.Country = &v
}

// GetVatNumber returns the VatNumber field value if set, zero value otherwise.
func (o *PaymentInfoView) GetVatNumber() string {
	if o == nil || o.VatNumber == nil {
		var ret string
		return ret
	}
	return *o.VatNumber
}

// GetVatNumberOk returns a tuple with the VatNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoView) GetVatNumberOk() (*string, bool) {
	if o == nil || o.VatNumber == nil {
		return nil, false
	}
	return o.VatNumber, true
}

// HasVatNumber returns a boolean if a field has been set.
func (o *PaymentInfoView) HasVatNumber() bool {
	if o != nil && o.VatNumber != nil {
		return true
	}

	return false
}

// SetVatNumber gets a reference to the given string and assigns it to the VatNumber field.
func (o *PaymentInfoView) SetVatNumber(v string) {
	o.VatNumber = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *PaymentInfoView) GetErrors() map[string]string {
	if o == nil || o.Errors == nil {
		var ret map[string]string
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfoView) GetErrorsOk() (*map[string]string, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *PaymentInfoView) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string]string and assigns it to the Errors field.
func (o *PaymentInfoView) SetErrors(v map[string]string) {
	o.Errors = &v
}

func (o PaymentInfoView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FromOrga != nil {
		toSerialize["fromOrga"] = o.FromOrga
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Company != nil {
		toSerialize["company"] = o.Company
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.ZipCode != nil {
		toSerialize["zipCode"] = o.ZipCode
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.VatNumber != nil {
		toSerialize["vatNumber"] = o.VatNumber
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentInfoView struct {
	value *PaymentInfoView
	isSet bool
}

func (v NullablePaymentInfoView) Get() *PaymentInfoView {
	return v.value
}

func (v *NullablePaymentInfoView) Set(val *PaymentInfoView) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInfoView) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInfoView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInfoView(val *PaymentInfoView) *NullablePaymentInfoView {
	return &NullablePaymentInfoView{value: val, isSet: true}
}

func (v NullablePaymentInfoView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInfoView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
