/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// CouponView struct for CouponView
type CouponView struct {
	Name      *string  `json:"name,omitempty"`
	Type      *string  `json:"type,omitempty"`
	Value     *float32 `json:"value,omitempty"`
	Remaining *int64   `json:"remaining,omitempty"`
}

// NewCouponView instantiates a new CouponView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouponView() *CouponView {
	this := CouponView{}
	return &this
}

// NewCouponViewWithDefaults instantiates a new CouponView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouponViewWithDefaults() *CouponView {
	this := CouponView{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CouponView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CouponView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CouponView) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CouponView) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponView) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CouponView) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CouponView) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CouponView) GetValue() float32 {
	if o == nil || o.Value == nil {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponView) GetValueOk() (*float32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CouponView) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *CouponView) SetValue(v float32) {
	o.Value = &v
}

// GetRemaining returns the Remaining field value if set, zero value otherwise.
func (o *CouponView) GetRemaining() int64 {
	if o == nil || o.Remaining == nil {
		var ret int64
		return ret
	}
	return *o.Remaining
}

// GetRemainingOk returns a tuple with the Remaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouponView) GetRemainingOk() (*int64, bool) {
	if o == nil || o.Remaining == nil {
		return nil, false
	}
	return o.Remaining, true
}

// HasRemaining returns a boolean if a field has been set.
func (o *CouponView) HasRemaining() bool {
	if o != nil && o.Remaining != nil {
		return true
	}

	return false
}

// SetRemaining gets a reference to the given int64 and assigns it to the Remaining field.
func (o *CouponView) SetRemaining(v int64) {
	o.Remaining = &v
}

func (o CouponView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Remaining != nil {
		toSerialize["remaining"] = o.Remaining
	}
	return json.Marshal(toSerialize)
}

type NullableCouponView struct {
	value *CouponView
	isSet bool
}

func (v NullableCouponView) Get() *CouponView {
	return v.value
}

func (v *NullableCouponView) Set(val *CouponView) {
	v.value = val
	v.isSet = true
}

func (v NullableCouponView) IsSet() bool {
	return v.isSet
}

func (v *NullableCouponView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouponView(val *CouponView) *NullableCouponView {
	return &NullableCouponView{value: val, isSet: true}
}

func (v NullableCouponView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouponView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
