/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// VhostView struct for VhostView
type VhostView struct {
	Fqdn *string `json:"fqdn,omitempty"`
}

// NewVhostView instantiates a new VhostView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVhostView() *VhostView {
	this := VhostView{}
	return &this
}

// NewVhostViewWithDefaults instantiates a new VhostView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVhostViewWithDefaults() *VhostView {
	this := VhostView{}
	return &this
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *VhostView) GetFqdn() string {
	if o == nil || o.Fqdn == nil {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VhostView) GetFqdnOk() (*string, bool) {
	if o == nil || o.Fqdn == nil {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *VhostView) HasFqdn() bool {
	if o != nil && o.Fqdn != nil {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *VhostView) SetFqdn(v string) {
	o.Fqdn = &v
}

func (o VhostView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fqdn != nil {
		toSerialize["fqdn"] = o.Fqdn
	}
	return json.Marshal(toSerialize)
}

type NullableVhostView struct {
	value *VhostView
	isSet bool
}

func (v NullableVhostView) Get() *VhostView {
	return v.value
}

func (v *NullableVhostView) Set(val *VhostView) {
	v.value = val
	v.isSet = true
}

func (v NullableVhostView) IsSet() bool {
	return v.isSet
}

func (v *NullableVhostView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVhostView(val *VhostView) *NullableVhostView {
	return &NullableVhostView{value: val, isSet: true}
}

func (v NullableVhostView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVhostView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
