/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// OAuthTransactionView struct for OAuthTransactionView
type OAuthTransactionView struct {
	TransactionId *string `json:"transactionId,omitempty"`
	RedirectUri   *string `json:"redirectUri,omitempty"`
}

// NewOAuthTransactionView instantiates a new OAuthTransactionView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthTransactionView() *OAuthTransactionView {
	this := OAuthTransactionView{}
	return &this
}

// NewOAuthTransactionViewWithDefaults instantiates a new OAuthTransactionView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthTransactionViewWithDefaults() *OAuthTransactionView {
	this := OAuthTransactionView{}
	return &this
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *OAuthTransactionView) GetTransactionId() string {
	if o == nil || o.TransactionId == nil {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthTransactionView) GetTransactionIdOk() (*string, bool) {
	if o == nil || o.TransactionId == nil {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *OAuthTransactionView) HasTransactionId() bool {
	if o != nil && o.TransactionId != nil {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *OAuthTransactionView) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetRedirectUri returns the RedirectUri field value if set, zero value otherwise.
func (o *OAuthTransactionView) GetRedirectUri() string {
	if o == nil || o.RedirectUri == nil {
		var ret string
		return ret
	}
	return *o.RedirectUri
}

// GetRedirectUriOk returns a tuple with the RedirectUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthTransactionView) GetRedirectUriOk() (*string, bool) {
	if o == nil || o.RedirectUri == nil {
		return nil, false
	}
	return o.RedirectUri, true
}

// HasRedirectUri returns a boolean if a field has been set.
func (o *OAuthTransactionView) HasRedirectUri() bool {
	if o != nil && o.RedirectUri != nil {
		return true
	}

	return false
}

// SetRedirectUri gets a reference to the given string and assigns it to the RedirectUri field.
func (o *OAuthTransactionView) SetRedirectUri(v string) {
	o.RedirectUri = &v
}

func (o OAuthTransactionView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TransactionId != nil {
		toSerialize["transactionId"] = o.TransactionId
	}
	if o.RedirectUri != nil {
		toSerialize["redirectUri"] = o.RedirectUri
	}
	return json.Marshal(toSerialize)
}

type NullableOAuthTransactionView struct {
	value *OAuthTransactionView
	isSet bool
}

func (v NullableOAuthTransactionView) Get() *OAuthTransactionView {
	return v.value
}

func (v *NullableOAuthTransactionView) Set(val *OAuthTransactionView) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthTransactionView) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthTransactionView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthTransactionView(val *OAuthTransactionView) *NullableOAuthTransactionView {
	return &NullableOAuthTransactionView{value: val, isSet: true}
}

func (v NullableOAuthTransactionView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthTransactionView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
