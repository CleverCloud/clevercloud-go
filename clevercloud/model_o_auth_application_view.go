/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// OAuthApplicationView struct for OAuthApplicationView
type OAuthApplicationView struct {
	Id            *string `json:"id,omitempty"`
	Owner         *string `json:"owner,omitempty"`
	Name          *string `json:"name,omitempty"`
	Description   *string `json:"description,omitempty"`
	GitUrl        *string `json:"gitUrl,omitempty"`
	DefaultBranch *string `json:"defaultBranch,omitempty"`
	Priv          *bool   `json:"priv,omitempty"`
}

// NewOAuthApplicationView instantiates a new OAuthApplicationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthApplicationView() *OAuthApplicationView {
	this := OAuthApplicationView{}
	return &this
}

// NewOAuthApplicationViewWithDefaults instantiates a new OAuthApplicationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthApplicationViewWithDefaults() *OAuthApplicationView {
	this := OAuthApplicationView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OAuthApplicationView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthApplicationView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OAuthApplicationView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OAuthApplicationView) SetId(v string) {
	o.Id = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *OAuthApplicationView) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthApplicationView) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *OAuthApplicationView) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *OAuthApplicationView) SetOwner(v string) {
	o.Owner = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OAuthApplicationView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthApplicationView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OAuthApplicationView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OAuthApplicationView) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OAuthApplicationView) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthApplicationView) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OAuthApplicationView) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OAuthApplicationView) SetDescription(v string) {
	o.Description = &v
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise.
func (o *OAuthApplicationView) GetGitUrl() string {
	if o == nil || o.GitUrl == nil {
		var ret string
		return ret
	}
	return *o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthApplicationView) GetGitUrlOk() (*string, bool) {
	if o == nil || o.GitUrl == nil {
		return nil, false
	}
	return o.GitUrl, true
}

// HasGitUrl returns a boolean if a field has been set.
func (o *OAuthApplicationView) HasGitUrl() bool {
	if o != nil && o.GitUrl != nil {
		return true
	}

	return false
}

// SetGitUrl gets a reference to the given string and assigns it to the GitUrl field.
func (o *OAuthApplicationView) SetGitUrl(v string) {
	o.GitUrl = &v
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *OAuthApplicationView) GetDefaultBranch() string {
	if o == nil || o.DefaultBranch == nil {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthApplicationView) GetDefaultBranchOk() (*string, bool) {
	if o == nil || o.DefaultBranch == nil {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *OAuthApplicationView) HasDefaultBranch() bool {
	if o != nil && o.DefaultBranch != nil {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *OAuthApplicationView) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetPriv returns the Priv field value if set, zero value otherwise.
func (o *OAuthApplicationView) GetPriv() bool {
	if o == nil || o.Priv == nil {
		var ret bool
		return ret
	}
	return *o.Priv
}

// GetPrivOk returns a tuple with the Priv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthApplicationView) GetPrivOk() (*bool, bool) {
	if o == nil || o.Priv == nil {
		return nil, false
	}
	return o.Priv, true
}

// HasPriv returns a boolean if a field has been set.
func (o *OAuthApplicationView) HasPriv() bool {
	if o != nil && o.Priv != nil {
		return true
	}

	return false
}

// SetPriv gets a reference to the given bool and assigns it to the Priv field.
func (o *OAuthApplicationView) SetPriv(v bool) {
	o.Priv = &v
}

func (o OAuthApplicationView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.GitUrl != nil {
		toSerialize["gitUrl"] = o.GitUrl
	}
	if o.DefaultBranch != nil {
		toSerialize["defaultBranch"] = o.DefaultBranch
	}
	if o.Priv != nil {
		toSerialize["priv"] = o.Priv
	}
	return json.Marshal(toSerialize)
}

type NullableOAuthApplicationView struct {
	value *OAuthApplicationView
	isSet bool
}

func (v NullableOAuthApplicationView) Get() *OAuthApplicationView {
	return v.value
}

func (v *NullableOAuthApplicationView) Set(val *OAuthApplicationView) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthApplicationView) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthApplicationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthApplicationView(val *OAuthApplicationView) *NullableOAuthApplicationView {
	return &NullableOAuthApplicationView{value: val, isSet: true}
}

func (v NullableOAuthApplicationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthApplicationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
