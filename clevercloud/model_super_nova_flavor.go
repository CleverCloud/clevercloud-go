/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// SuperNovaFlavor struct for SuperNovaFlavor
type SuperNovaFlavor struct {
	Name  *string  `json:"name,omitempty"`
	Mem   *int32   `json:"mem,omitempty"`
	Cpus  *int32   `json:"cpus,omitempty"`
	Price *float64 `json:"price,omitempty"`
}

// NewSuperNovaFlavor instantiates a new SuperNovaFlavor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperNovaFlavor() *SuperNovaFlavor {
	this := SuperNovaFlavor{}
	return &this
}

// NewSuperNovaFlavorWithDefaults instantiates a new SuperNovaFlavor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperNovaFlavorWithDefaults() *SuperNovaFlavor {
	this := SuperNovaFlavor{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SuperNovaFlavor) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaFlavor) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SuperNovaFlavor) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SuperNovaFlavor) SetName(v string) {
	o.Name = &v
}

// GetMem returns the Mem field value if set, zero value otherwise.
func (o *SuperNovaFlavor) GetMem() int32 {
	if o == nil || o.Mem == nil {
		var ret int32
		return ret
	}
	return *o.Mem
}

// GetMemOk returns a tuple with the Mem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaFlavor) GetMemOk() (*int32, bool) {
	if o == nil || o.Mem == nil {
		return nil, false
	}
	return o.Mem, true
}

// HasMem returns a boolean if a field has been set.
func (o *SuperNovaFlavor) HasMem() bool {
	if o != nil && o.Mem != nil {
		return true
	}

	return false
}

// SetMem gets a reference to the given int32 and assigns it to the Mem field.
func (o *SuperNovaFlavor) SetMem(v int32) {
	o.Mem = &v
}

// GetCpus returns the Cpus field value if set, zero value otherwise.
func (o *SuperNovaFlavor) GetCpus() int32 {
	if o == nil || o.Cpus == nil {
		var ret int32
		return ret
	}
	return *o.Cpus
}

// GetCpusOk returns a tuple with the Cpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaFlavor) GetCpusOk() (*int32, bool) {
	if o == nil || o.Cpus == nil {
		return nil, false
	}
	return o.Cpus, true
}

// HasCpus returns a boolean if a field has been set.
func (o *SuperNovaFlavor) HasCpus() bool {
	if o != nil && o.Cpus != nil {
		return true
	}

	return false
}

// SetCpus gets a reference to the given int32 and assigns it to the Cpus field.
func (o *SuperNovaFlavor) SetCpus(v int32) {
	o.Cpus = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SuperNovaFlavor) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaFlavor) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SuperNovaFlavor) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *SuperNovaFlavor) SetPrice(v float64) {
	o.Price = &v
}

func (o SuperNovaFlavor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Mem != nil {
		toSerialize["mem"] = o.Mem
	}
	if o.Cpus != nil {
		toSerialize["cpus"] = o.Cpus
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullableSuperNovaFlavor struct {
	value *SuperNovaFlavor
	isSet bool
}

func (v NullableSuperNovaFlavor) Get() *SuperNovaFlavor {
	return v.value
}

func (v *NullableSuperNovaFlavor) Set(val *SuperNovaFlavor) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperNovaFlavor) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperNovaFlavor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperNovaFlavor(val *SuperNovaFlavor) *NullableSuperNovaFlavor {
	return &NullableSuperNovaFlavor{value: val, isSet: true}
}

func (v NullableSuperNovaFlavor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperNovaFlavor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
