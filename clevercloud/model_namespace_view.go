/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// NamespaceView struct for NamespaceView
type NamespaceView struct {
	Namespace *string `json:"namespace,omitempty"`
}

// NewNamespaceView instantiates a new NamespaceView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceView() *NamespaceView {
	this := NamespaceView{}
	return &this
}

// NewNamespaceViewWithDefaults instantiates a new NamespaceView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceViewWithDefaults() *NamespaceView {
	this := NamespaceView{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *NamespaceView) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceView) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *NamespaceView) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *NamespaceView) SetNamespace(v string) {
	o.Namespace = &v
}

func (o NamespaceView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	return json.Marshal(toSerialize)
}

type NullableNamespaceView struct {
	value *NamespaceView
	isSet bool
}

func (v NullableNamespaceView) Get() *NamespaceView {
	return v.value
}

func (v *NullableNamespaceView) Set(val *NamespaceView) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceView) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceView(val *NamespaceView) *NullableNamespaceView {
	return &NullableNamespaceView{value: val, isSet: true}
}

func (v NullableNamespaceView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
