/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// WannabeBuildFlavor struct for WannabeBuildFlavor
type WannabeBuildFlavor struct {
	FlavorName *string `json:"flavorName,omitempty"`
}

// NewWannabeBuildFlavor instantiates a new WannabeBuildFlavor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWannabeBuildFlavor() *WannabeBuildFlavor {
	this := WannabeBuildFlavor{}
	return &this
}

// NewWannabeBuildFlavorWithDefaults instantiates a new WannabeBuildFlavor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWannabeBuildFlavorWithDefaults() *WannabeBuildFlavor {
	this := WannabeBuildFlavor{}
	return &this
}

// GetFlavorName returns the FlavorName field value if set, zero value otherwise.
func (o *WannabeBuildFlavor) GetFlavorName() string {
	if o == nil || o.FlavorName == nil {
		var ret string
		return ret
	}
	return *o.FlavorName
}

// GetFlavorNameOk returns a tuple with the FlavorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeBuildFlavor) GetFlavorNameOk() (*string, bool) {
	if o == nil || o.FlavorName == nil {
		return nil, false
	}
	return o.FlavorName, true
}

// HasFlavorName returns a boolean if a field has been set.
func (o *WannabeBuildFlavor) HasFlavorName() bool {
	if o != nil && o.FlavorName != nil {
		return true
	}

	return false
}

// SetFlavorName gets a reference to the given string and assigns it to the FlavorName field.
func (o *WannabeBuildFlavor) SetFlavorName(v string) {
	o.FlavorName = &v
}

func (o WannabeBuildFlavor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlavorName != nil {
		toSerialize["flavorName"] = o.FlavorName
	}
	return json.Marshal(toSerialize)
}

type NullableWannabeBuildFlavor struct {
	value *WannabeBuildFlavor
	isSet bool
}

func (v NullableWannabeBuildFlavor) Get() *WannabeBuildFlavor {
	return v.value
}

func (v *NullableWannabeBuildFlavor) Set(val *WannabeBuildFlavor) {
	v.value = val
	v.isSet = true
}

func (v NullableWannabeBuildFlavor) IsSet() bool {
	return v.isSet
}

func (v *NullableWannabeBuildFlavor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWannabeBuildFlavor(val *WannabeBuildFlavor) *NullableWannabeBuildFlavor {
	return &NullableWannabeBuildFlavor{value: val, isSet: true}
}

func (v NullableWannabeBuildFlavor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWannabeBuildFlavor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
