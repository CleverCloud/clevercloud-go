/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// GithubWebhookSender struct for GithubWebhookSender
type GithubWebhookSender struct {
	Id *string `json:"id,omitempty"`
}

// NewGithubWebhookSender instantiates a new GithubWebhookSender object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubWebhookSender() *GithubWebhookSender {
	this := GithubWebhookSender{}
	return &this
}

// NewGithubWebhookSenderWithDefaults instantiates a new GithubWebhookSender object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubWebhookSenderWithDefaults() *GithubWebhookSender {
	this := GithubWebhookSender{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GithubWebhookSender) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebhookSender) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GithubWebhookSender) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GithubWebhookSender) SetId(v string) {
	o.Id = &v
}

func (o GithubWebhookSender) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableGithubWebhookSender struct {
	value *GithubWebhookSender
	isSet bool
}

func (v NullableGithubWebhookSender) Get() *GithubWebhookSender {
	return v.value
}

func (v *NullableGithubWebhookSender) Set(val *GithubWebhookSender) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubWebhookSender) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubWebhookSender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubWebhookSender(val *GithubWebhookSender) *NullableGithubWebhookSender {
	return &NullableGithubWebhookSender{value: val, isSet: true}
}

func (v NullableGithubWebhookSender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubWebhookSender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
