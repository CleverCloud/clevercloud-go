/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// DeploymentInfoView struct for DeploymentInfoView
type DeploymentInfoView struct {
	Shutdownable *bool   `json:"shutdownable,omitempty"`
	Type         *string `json:"type,omitempty"`
	RepoState    *string `json:"repoState,omitempty"`
	Url          *string `json:"url,omitempty"`
	HttpUrl      *string `json:"httpUrl,omitempty"`
}

// NewDeploymentInfoView instantiates a new DeploymentInfoView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentInfoView() *DeploymentInfoView {
	this := DeploymentInfoView{}
	return &this
}

// NewDeploymentInfoViewWithDefaults instantiates a new DeploymentInfoView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentInfoViewWithDefaults() *DeploymentInfoView {
	this := DeploymentInfoView{}
	return &this
}

// GetShutdownable returns the Shutdownable field value if set, zero value otherwise.
func (o *DeploymentInfoView) GetShutdownable() bool {
	if o == nil || o.Shutdownable == nil {
		var ret bool
		return ret
	}
	return *o.Shutdownable
}

// GetShutdownableOk returns a tuple with the Shutdownable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentInfoView) GetShutdownableOk() (*bool, bool) {
	if o == nil || o.Shutdownable == nil {
		return nil, false
	}
	return o.Shutdownable, true
}

// HasShutdownable returns a boolean if a field has been set.
func (o *DeploymentInfoView) HasShutdownable() bool {
	if o != nil && o.Shutdownable != nil {
		return true
	}

	return false
}

// SetShutdownable gets a reference to the given bool and assigns it to the Shutdownable field.
func (o *DeploymentInfoView) SetShutdownable(v bool) {
	o.Shutdownable = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeploymentInfoView) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentInfoView) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeploymentInfoView) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DeploymentInfoView) SetType(v string) {
	o.Type = &v
}

// GetRepoState returns the RepoState field value if set, zero value otherwise.
func (o *DeploymentInfoView) GetRepoState() string {
	if o == nil || o.RepoState == nil {
		var ret string
		return ret
	}
	return *o.RepoState
}

// GetRepoStateOk returns a tuple with the RepoState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentInfoView) GetRepoStateOk() (*string, bool) {
	if o == nil || o.RepoState == nil {
		return nil, false
	}
	return o.RepoState, true
}

// HasRepoState returns a boolean if a field has been set.
func (o *DeploymentInfoView) HasRepoState() bool {
	if o != nil && o.RepoState != nil {
		return true
	}

	return false
}

// SetRepoState gets a reference to the given string and assigns it to the RepoState field.
func (o *DeploymentInfoView) SetRepoState(v string) {
	o.RepoState = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DeploymentInfoView) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentInfoView) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DeploymentInfoView) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DeploymentInfoView) SetUrl(v string) {
	o.Url = &v
}

// GetHttpUrl returns the HttpUrl field value if set, zero value otherwise.
func (o *DeploymentInfoView) GetHttpUrl() string {
	if o == nil || o.HttpUrl == nil {
		var ret string
		return ret
	}
	return *o.HttpUrl
}

// GetHttpUrlOk returns a tuple with the HttpUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentInfoView) GetHttpUrlOk() (*string, bool) {
	if o == nil || o.HttpUrl == nil {
		return nil, false
	}
	return o.HttpUrl, true
}

// HasHttpUrl returns a boolean if a field has been set.
func (o *DeploymentInfoView) HasHttpUrl() bool {
	if o != nil && o.HttpUrl != nil {
		return true
	}

	return false
}

// SetHttpUrl gets a reference to the given string and assigns it to the HttpUrl field.
func (o *DeploymentInfoView) SetHttpUrl(v string) {
	o.HttpUrl = &v
}

func (o DeploymentInfoView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Shutdownable != nil {
		toSerialize["shutdownable"] = o.Shutdownable
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.RepoState != nil {
		toSerialize["repoState"] = o.RepoState
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.HttpUrl != nil {
		toSerialize["httpUrl"] = o.HttpUrl
	}
	return json.Marshal(toSerialize)
}

type NullableDeploymentInfoView struct {
	value *DeploymentInfoView
	isSet bool
}

func (v NullableDeploymentInfoView) Get() *DeploymentInfoView {
	return v.value
}

func (v *NullableDeploymentInfoView) Set(val *DeploymentInfoView) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentInfoView) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentInfoView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentInfoView(val *DeploymentInfoView) *NullableDeploymentInfoView {
	return &NullableDeploymentInfoView{value: val, isSet: true}
}

func (v NullableDeploymentInfoView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentInfoView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
