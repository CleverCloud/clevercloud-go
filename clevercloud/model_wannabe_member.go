/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// WannabeMember struct for WannabeMember
type WannabeMember struct {
	Role  *string `json:"role,omitempty"`
	Job   *string `json:"job,omitempty"`
	Email *string `json:"email,omitempty"`
}

// NewWannabeMember instantiates a new WannabeMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWannabeMember() *WannabeMember {
	this := WannabeMember{}
	return &this
}

// NewWannabeMemberWithDefaults instantiates a new WannabeMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWannabeMemberWithDefaults() *WannabeMember {
	this := WannabeMember{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *WannabeMember) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeMember) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *WannabeMember) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *WannabeMember) SetRole(v string) {
	o.Role = &v
}

// GetJob returns the Job field value if set, zero value otherwise.
func (o *WannabeMember) GetJob() string {
	if o == nil || o.Job == nil {
		var ret string
		return ret
	}
	return *o.Job
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeMember) GetJobOk() (*string, bool) {
	if o == nil || o.Job == nil {
		return nil, false
	}
	return o.Job, true
}

// HasJob returns a boolean if a field has been set.
func (o *WannabeMember) HasJob() bool {
	if o != nil && o.Job != nil {
		return true
	}

	return false
}

// SetJob gets a reference to the given string and assigns it to the Job field.
func (o *WannabeMember) SetJob(v string) {
	o.Job = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *WannabeMember) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeMember) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *WannabeMember) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *WannabeMember) SetEmail(v string) {
	o.Email = &v
}

func (o WannabeMember) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Job != nil {
		toSerialize["job"] = o.Job
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableWannabeMember struct {
	value *WannabeMember
	isSet bool
}

func (v NullableWannabeMember) Get() *WannabeMember {
	return v.value
}

func (v *NullableWannabeMember) Set(val *WannabeMember) {
	v.value = val
	v.isSet = true
}

func (v NullableWannabeMember) IsSet() bool {
	return v.isSet
}

func (v *NullableWannabeMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWannabeMember(val *WannabeMember) *NullableWannabeMember {
	return &NullableWannabeMember{value: val, isSet: true}
}

func (v NullableWannabeMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWannabeMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
