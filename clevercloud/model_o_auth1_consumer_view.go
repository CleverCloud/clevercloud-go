/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// OAuth1ConsumerView struct for OAuth1ConsumerView
type OAuth1ConsumerView struct {
	Name        *string          `json:"name,omitempty"`
	Description *string          `json:"description,omitempty"`
	Key         *string          `json:"key,omitempty"`
	Url         *string          `json:"url,omitempty"`
	Picture     *string          `json:"picture,omitempty"`
	BaseUrl     *string          `json:"baseUrl,omitempty"`
	Rights      *OAuthRightsView `json:"rights,omitempty"`
}

// NewOAuth1ConsumerView instantiates a new OAuth1ConsumerView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth1ConsumerView() *OAuth1ConsumerView {
	this := OAuth1ConsumerView{}
	return &this
}

// NewOAuth1ConsumerViewWithDefaults instantiates a new OAuth1ConsumerView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuth1ConsumerViewWithDefaults() *OAuth1ConsumerView {
	this := OAuth1ConsumerView{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OAuth1ConsumerView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1ConsumerView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OAuth1ConsumerView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OAuth1ConsumerView) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OAuth1ConsumerView) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1ConsumerView) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OAuth1ConsumerView) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OAuth1ConsumerView) SetDescription(v string) {
	o.Description = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *OAuth1ConsumerView) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1ConsumerView) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *OAuth1ConsumerView) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *OAuth1ConsumerView) SetKey(v string) {
	o.Key = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OAuth1ConsumerView) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1ConsumerView) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OAuth1ConsumerView) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OAuth1ConsumerView) SetUrl(v string) {
	o.Url = &v
}

// GetPicture returns the Picture field value if set, zero value otherwise.
func (o *OAuth1ConsumerView) GetPicture() string {
	if o == nil || o.Picture == nil {
		var ret string
		return ret
	}
	return *o.Picture
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1ConsumerView) GetPictureOk() (*string, bool) {
	if o == nil || o.Picture == nil {
		return nil, false
	}
	return o.Picture, true
}

// HasPicture returns a boolean if a field has been set.
func (o *OAuth1ConsumerView) HasPicture() bool {
	if o != nil && o.Picture != nil {
		return true
	}

	return false
}

// SetPicture gets a reference to the given string and assigns it to the Picture field.
func (o *OAuth1ConsumerView) SetPicture(v string) {
	o.Picture = &v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *OAuth1ConsumerView) GetBaseUrl() string {
	if o == nil || o.BaseUrl == nil {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1ConsumerView) GetBaseUrlOk() (*string, bool) {
	if o == nil || o.BaseUrl == nil {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *OAuth1ConsumerView) HasBaseUrl() bool {
	if o != nil && o.BaseUrl != nil {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *OAuth1ConsumerView) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

// GetRights returns the Rights field value if set, zero value otherwise.
func (o *OAuth1ConsumerView) GetRights() OAuthRightsView {
	if o == nil || o.Rights == nil {
		var ret OAuthRightsView
		return ret
	}
	return *o.Rights
}

// GetRightsOk returns a tuple with the Rights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth1ConsumerView) GetRightsOk() (*OAuthRightsView, bool) {
	if o == nil || o.Rights == nil {
		return nil, false
	}
	return o.Rights, true
}

// HasRights returns a boolean if a field has been set.
func (o *OAuth1ConsumerView) HasRights() bool {
	if o != nil && o.Rights != nil {
		return true
	}

	return false
}

// SetRights gets a reference to the given OAuthRightsView and assigns it to the Rights field.
func (o *OAuth1ConsumerView) SetRights(v OAuthRightsView) {
	o.Rights = &v
}

func (o OAuth1ConsumerView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Picture != nil {
		toSerialize["picture"] = o.Picture
	}
	if o.BaseUrl != nil {
		toSerialize["baseUrl"] = o.BaseUrl
	}
	if o.Rights != nil {
		toSerialize["rights"] = o.Rights
	}
	return json.Marshal(toSerialize)
}

type NullableOAuth1ConsumerView struct {
	value *OAuth1ConsumerView
	isSet bool
}

func (v NullableOAuth1ConsumerView) Get() *OAuth1ConsumerView {
	return v.value
}

func (v *NullableOAuth1ConsumerView) Set(val *OAuth1ConsumerView) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth1ConsumerView) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth1ConsumerView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth1ConsumerView(val *OAuth1ConsumerView) *NullableOAuth1ConsumerView {
	return &NullableOAuth1ConsumerView{value: val, isSet: true}
}

func (v NullableOAuth1ConsumerView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth1ConsumerView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
