/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// GithubWebhookPayload struct for GithubWebhookPayload
type GithubWebhookPayload struct {
	Ref        *string                  `json:"ref,omitempty"`
	After      *string                  `json:"after,omitempty"`
	Repository *GithubWebhookRepository `json:"repository,omitempty"`
	Sender     *GithubWebhookSender     `json:"sender,omitempty"`
	Pusher     *GithubWebhookPusher     `json:"pusher,omitempty"`
	HeadCommit *GithubCommit            `json:"head_commit,omitempty"`
}

// NewGithubWebhookPayload instantiates a new GithubWebhookPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubWebhookPayload() *GithubWebhookPayload {
	this := GithubWebhookPayload{}
	return &this
}

// NewGithubWebhookPayloadWithDefaults instantiates a new GithubWebhookPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubWebhookPayloadWithDefaults() *GithubWebhookPayload {
	this := GithubWebhookPayload{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *GithubWebhookPayload) GetRef() string {
	if o == nil || o.Ref == nil {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebhookPayload) GetRefOk() (*string, bool) {
	if o == nil || o.Ref == nil {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *GithubWebhookPayload) HasRef() bool {
	if o != nil && o.Ref != nil {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *GithubWebhookPayload) SetRef(v string) {
	o.Ref = &v
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *GithubWebhookPayload) GetAfter() string {
	if o == nil || o.After == nil {
		var ret string
		return ret
	}
	return *o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebhookPayload) GetAfterOk() (*string, bool) {
	if o == nil || o.After == nil {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *GithubWebhookPayload) HasAfter() bool {
	if o != nil && o.After != nil {
		return true
	}

	return false
}

// SetAfter gets a reference to the given string and assigns it to the After field.
func (o *GithubWebhookPayload) SetAfter(v string) {
	o.After = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *GithubWebhookPayload) GetRepository() GithubWebhookRepository {
	if o == nil || o.Repository == nil {
		var ret GithubWebhookRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebhookPayload) GetRepositoryOk() (*GithubWebhookRepository, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *GithubWebhookPayload) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given GithubWebhookRepository and assigns it to the Repository field.
func (o *GithubWebhookPayload) SetRepository(v GithubWebhookRepository) {
	o.Repository = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *GithubWebhookPayload) GetSender() GithubWebhookSender {
	if o == nil || o.Sender == nil {
		var ret GithubWebhookSender
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebhookPayload) GetSenderOk() (*GithubWebhookSender, bool) {
	if o == nil || o.Sender == nil {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *GithubWebhookPayload) HasSender() bool {
	if o != nil && o.Sender != nil {
		return true
	}

	return false
}

// SetSender gets a reference to the given GithubWebhookSender and assigns it to the Sender field.
func (o *GithubWebhookPayload) SetSender(v GithubWebhookSender) {
	o.Sender = &v
}

// GetPusher returns the Pusher field value if set, zero value otherwise.
func (o *GithubWebhookPayload) GetPusher() GithubWebhookPusher {
	if o == nil || o.Pusher == nil {
		var ret GithubWebhookPusher
		return ret
	}
	return *o.Pusher
}

// GetPusherOk returns a tuple with the Pusher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebhookPayload) GetPusherOk() (*GithubWebhookPusher, bool) {
	if o == nil || o.Pusher == nil {
		return nil, false
	}
	return o.Pusher, true
}

// HasPusher returns a boolean if a field has been set.
func (o *GithubWebhookPayload) HasPusher() bool {
	if o != nil && o.Pusher != nil {
		return true
	}

	return false
}

// SetPusher gets a reference to the given GithubWebhookPusher and assigns it to the Pusher field.
func (o *GithubWebhookPayload) SetPusher(v GithubWebhookPusher) {
	o.Pusher = &v
}

// GetHeadCommit returns the HeadCommit field value if set, zero value otherwise.
func (o *GithubWebhookPayload) GetHeadCommit() GithubCommit {
	if o == nil || o.HeadCommit == nil {
		var ret GithubCommit
		return ret
	}
	return *o.HeadCommit
}

// GetHeadCommitOk returns a tuple with the HeadCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebhookPayload) GetHeadCommitOk() (*GithubCommit, bool) {
	if o == nil || o.HeadCommit == nil {
		return nil, false
	}
	return o.HeadCommit, true
}

// HasHeadCommit returns a boolean if a field has been set.
func (o *GithubWebhookPayload) HasHeadCommit() bool {
	if o != nil && o.HeadCommit != nil {
		return true
	}

	return false
}

// SetHeadCommit gets a reference to the given GithubCommit and assigns it to the HeadCommit field.
func (o *GithubWebhookPayload) SetHeadCommit(v GithubCommit) {
	o.HeadCommit = &v
}

func (o GithubWebhookPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ref != nil {
		toSerialize["ref"] = o.Ref
	}
	if o.After != nil {
		toSerialize["after"] = o.After
	}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}
	if o.Sender != nil {
		toSerialize["sender"] = o.Sender
	}
	if o.Pusher != nil {
		toSerialize["pusher"] = o.Pusher
	}
	if o.HeadCommit != nil {
		toSerialize["head_commit"] = o.HeadCommit
	}
	return json.Marshal(toSerialize)
}

type NullableGithubWebhookPayload struct {
	value *GithubWebhookPayload
	isSet bool
}

func (v NullableGithubWebhookPayload) Get() *GithubWebhookPayload {
	return v.value
}

func (v *NullableGithubWebhookPayload) Set(val *GithubWebhookPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubWebhookPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubWebhookPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubWebhookPayload(val *GithubWebhookPayload) *NullableGithubWebhookPayload {
	return &NullableGithubWebhookPayload{value: val, isSet: true}
}

func (v NullableGithubWebhookPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubWebhookPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
