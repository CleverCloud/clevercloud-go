/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// GithubCommit struct for GithubCommit
type GithubCommit struct {
	Sha     *string `json:"sha,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewGithubCommit instantiates a new GithubCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubCommit() *GithubCommit {
	this := GithubCommit{}
	return &this
}

// NewGithubCommitWithDefaults instantiates a new GithubCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubCommitWithDefaults() *GithubCommit {
	this := GithubCommit{}
	return &this
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GithubCommit) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubCommit) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GithubCommit) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GithubCommit) SetSha(v string) {
	o.Sha = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GithubCommit) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubCommit) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GithubCommit) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GithubCommit) SetMessage(v string) {
	o.Message = &v
}

func (o GithubCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableGithubCommit struct {
	value *GithubCommit
	isSet bool
}

func (v NullableGithubCommit) Get() *GithubCommit {
	return v.value
}

func (v *NullableGithubCommit) Set(val *GithubCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubCommit(val *GithubCommit) *NullableGithubCommit {
	return &NullableGithubCommit{value: val, isSet: true}
}

func (v NullableGithubCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
