/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// WannabeApplication struct for WannabeApplication
type WannabeApplication struct {
	Name             *string          `json:"name,omitempty"`
	Description      *string          `json:"description,omitempty"`
	Zone             *string          `json:"zone,omitempty"`
	Deploy           *string          `json:"deploy,omitempty"`
	Shutdownable     *bool            `json:"shutdownable,omitempty"`
	InstanceType     *string          `json:"instanceType,omitempty"`
	InstanceVersion  *string          `json:"instanceVersion,omitempty"`
	InstanceVariant  *string          `json:"instanceVariant,omitempty"`
	InstanceLifetime *string          `json:"instanceLifetime,omitempty"`
	MinInstances     *int32           `json:"minInstances,omitempty"`
	MaxInstances     *int32           `json:"maxInstances,omitempty"`
	MinFlavor        *string          `json:"minFlavor,omitempty"`
	MaxFlavor        *string          `json:"maxFlavor,omitempty"`
	Tags             *[]string        `json:"tags,omitempty"`
	Archived         *bool            `json:"archived,omitempty"`
	StickySessions   *bool            `json:"stickySessions,omitempty"`
	Homogeneous      *bool            `json:"homogeneous,omitempty"`
	Favourite        *bool            `json:"favourite,omitempty"`
	CancelOnPush     *bool            `json:"cancelOnPush,omitempty"`
	SeparateBuild    *bool            `json:"separateBuild,omitempty"`
	BuildFlavor      *string          `json:"buildFlavor,omitempty"`
	OauthService     *string          `json:"oauthService,omitempty"`
	OauthAppId       *string          `json:"oauthAppId,omitempty"`
	OauthApp         *WannabeOauthApp `json:"oauthApp,omitempty"`
	ApplianceId      *string          `json:"applianceId,omitempty"`
	Branch           *string          `json:"branch,omitempty"`
	ForceHttps       *string          `json:"forceHttps,omitempty"`
}

// NewWannabeApplication instantiates a new WannabeApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWannabeApplication() *WannabeApplication {
	this := WannabeApplication{}
	return &this
}

// NewWannabeApplicationWithDefaults instantiates a new WannabeApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWannabeApplicationWithDefaults() *WannabeApplication {
	this := WannabeApplication{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WannabeApplication) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WannabeApplication) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WannabeApplication) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WannabeApplication) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WannabeApplication) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WannabeApplication) SetDescription(v string) {
	o.Description = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *WannabeApplication) GetZone() string {
	if o == nil || o.Zone == nil {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetZoneOk() (*string, bool) {
	if o == nil || o.Zone == nil {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *WannabeApplication) HasZone() bool {
	if o != nil && o.Zone != nil {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *WannabeApplication) SetZone(v string) {
	o.Zone = &v
}

// GetDeploy returns the Deploy field value if set, zero value otherwise.
func (o *WannabeApplication) GetDeploy() string {
	if o == nil || o.Deploy == nil {
		var ret string
		return ret
	}
	return *o.Deploy
}

// GetDeployOk returns a tuple with the Deploy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetDeployOk() (*string, bool) {
	if o == nil || o.Deploy == nil {
		return nil, false
	}
	return o.Deploy, true
}

// HasDeploy returns a boolean if a field has been set.
func (o *WannabeApplication) HasDeploy() bool {
	if o != nil && o.Deploy != nil {
		return true
	}

	return false
}

// SetDeploy gets a reference to the given string and assigns it to the Deploy field.
func (o *WannabeApplication) SetDeploy(v string) {
	o.Deploy = &v
}

// GetShutdownable returns the Shutdownable field value if set, zero value otherwise.
func (o *WannabeApplication) GetShutdownable() bool {
	if o == nil || o.Shutdownable == nil {
		var ret bool
		return ret
	}
	return *o.Shutdownable
}

// GetShutdownableOk returns a tuple with the Shutdownable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetShutdownableOk() (*bool, bool) {
	if o == nil || o.Shutdownable == nil {
		return nil, false
	}
	return o.Shutdownable, true
}

// HasShutdownable returns a boolean if a field has been set.
func (o *WannabeApplication) HasShutdownable() bool {
	if o != nil && o.Shutdownable != nil {
		return true
	}

	return false
}

// SetShutdownable gets a reference to the given bool and assigns it to the Shutdownable field.
func (o *WannabeApplication) SetShutdownable(v bool) {
	o.Shutdownable = &v
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *WannabeApplication) GetInstanceType() string {
	if o == nil || o.InstanceType == nil {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetInstanceTypeOk() (*string, bool) {
	if o == nil || o.InstanceType == nil {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *WannabeApplication) HasInstanceType() bool {
	if o != nil && o.InstanceType != nil {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *WannabeApplication) SetInstanceType(v string) {
	o.InstanceType = &v
}

// GetInstanceVersion returns the InstanceVersion field value if set, zero value otherwise.
func (o *WannabeApplication) GetInstanceVersion() string {
	if o == nil || o.InstanceVersion == nil {
		var ret string
		return ret
	}
	return *o.InstanceVersion
}

// GetInstanceVersionOk returns a tuple with the InstanceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetInstanceVersionOk() (*string, bool) {
	if o == nil || o.InstanceVersion == nil {
		return nil, false
	}
	return o.InstanceVersion, true
}

// HasInstanceVersion returns a boolean if a field has been set.
func (o *WannabeApplication) HasInstanceVersion() bool {
	if o != nil && o.InstanceVersion != nil {
		return true
	}

	return false
}

// SetInstanceVersion gets a reference to the given string and assigns it to the InstanceVersion field.
func (o *WannabeApplication) SetInstanceVersion(v string) {
	o.InstanceVersion = &v
}

// GetInstanceVariant returns the InstanceVariant field value if set, zero value otherwise.
func (o *WannabeApplication) GetInstanceVariant() string {
	if o == nil || o.InstanceVariant == nil {
		var ret string
		return ret
	}
	return *o.InstanceVariant
}

// GetInstanceVariantOk returns a tuple with the InstanceVariant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetInstanceVariantOk() (*string, bool) {
	if o == nil || o.InstanceVariant == nil {
		return nil, false
	}
	return o.InstanceVariant, true
}

// HasInstanceVariant returns a boolean if a field has been set.
func (o *WannabeApplication) HasInstanceVariant() bool {
	if o != nil && o.InstanceVariant != nil {
		return true
	}

	return false
}

// SetInstanceVariant gets a reference to the given string and assigns it to the InstanceVariant field.
func (o *WannabeApplication) SetInstanceVariant(v string) {
	o.InstanceVariant = &v
}

// GetInstanceLifetime returns the InstanceLifetime field value if set, zero value otherwise.
func (o *WannabeApplication) GetInstanceLifetime() string {
	if o == nil || o.InstanceLifetime == nil {
		var ret string
		return ret
	}
	return *o.InstanceLifetime
}

// GetInstanceLifetimeOk returns a tuple with the InstanceLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetInstanceLifetimeOk() (*string, bool) {
	if o == nil || o.InstanceLifetime == nil {
		return nil, false
	}
	return o.InstanceLifetime, true
}

// HasInstanceLifetime returns a boolean if a field has been set.
func (o *WannabeApplication) HasInstanceLifetime() bool {
	if o != nil && o.InstanceLifetime != nil {
		return true
	}

	return false
}

// SetInstanceLifetime gets a reference to the given string and assigns it to the InstanceLifetime field.
func (o *WannabeApplication) SetInstanceLifetime(v string) {
	o.InstanceLifetime = &v
}

// GetMinInstances returns the MinInstances field value if set, zero value otherwise.
func (o *WannabeApplication) GetMinInstances() int32 {
	if o == nil || o.MinInstances == nil {
		var ret int32
		return ret
	}
	return *o.MinInstances
}

// GetMinInstancesOk returns a tuple with the MinInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetMinInstancesOk() (*int32, bool) {
	if o == nil || o.MinInstances == nil {
		return nil, false
	}
	return o.MinInstances, true
}

// HasMinInstances returns a boolean if a field has been set.
func (o *WannabeApplication) HasMinInstances() bool {
	if o != nil && o.MinInstances != nil {
		return true
	}

	return false
}

// SetMinInstances gets a reference to the given int32 and assigns it to the MinInstances field.
func (o *WannabeApplication) SetMinInstances(v int32) {
	o.MinInstances = &v
}

// GetMaxInstances returns the MaxInstances field value if set, zero value otherwise.
func (o *WannabeApplication) GetMaxInstances() int32 {
	if o == nil || o.MaxInstances == nil {
		var ret int32
		return ret
	}
	return *o.MaxInstances
}

// GetMaxInstancesOk returns a tuple with the MaxInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetMaxInstancesOk() (*int32, bool) {
	if o == nil || o.MaxInstances == nil {
		return nil, false
	}
	return o.MaxInstances, true
}

// HasMaxInstances returns a boolean if a field has been set.
func (o *WannabeApplication) HasMaxInstances() bool {
	if o != nil && o.MaxInstances != nil {
		return true
	}

	return false
}

// SetMaxInstances gets a reference to the given int32 and assigns it to the MaxInstances field.
func (o *WannabeApplication) SetMaxInstances(v int32) {
	o.MaxInstances = &v
}

// GetMinFlavor returns the MinFlavor field value if set, zero value otherwise.
func (o *WannabeApplication) GetMinFlavor() string {
	if o == nil || o.MinFlavor == nil {
		var ret string
		return ret
	}
	return *o.MinFlavor
}

// GetMinFlavorOk returns a tuple with the MinFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetMinFlavorOk() (*string, bool) {
	if o == nil || o.MinFlavor == nil {
		return nil, false
	}
	return o.MinFlavor, true
}

// HasMinFlavor returns a boolean if a field has been set.
func (o *WannabeApplication) HasMinFlavor() bool {
	if o != nil && o.MinFlavor != nil {
		return true
	}

	return false
}

// SetMinFlavor gets a reference to the given string and assigns it to the MinFlavor field.
func (o *WannabeApplication) SetMinFlavor(v string) {
	o.MinFlavor = &v
}

// GetMaxFlavor returns the MaxFlavor field value if set, zero value otherwise.
func (o *WannabeApplication) GetMaxFlavor() string {
	if o == nil || o.MaxFlavor == nil {
		var ret string
		return ret
	}
	return *o.MaxFlavor
}

// GetMaxFlavorOk returns a tuple with the MaxFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetMaxFlavorOk() (*string, bool) {
	if o == nil || o.MaxFlavor == nil {
		return nil, false
	}
	return o.MaxFlavor, true
}

// HasMaxFlavor returns a boolean if a field has been set.
func (o *WannabeApplication) HasMaxFlavor() bool {
	if o != nil && o.MaxFlavor != nil {
		return true
	}

	return false
}

// SetMaxFlavor gets a reference to the given string and assigns it to the MaxFlavor field.
func (o *WannabeApplication) SetMaxFlavor(v string) {
	o.MaxFlavor = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *WannabeApplication) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *WannabeApplication) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *WannabeApplication) SetTags(v []string) {
	o.Tags = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *WannabeApplication) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *WannabeApplication) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *WannabeApplication) SetArchived(v bool) {
	o.Archived = &v
}

// GetStickySessions returns the StickySessions field value if set, zero value otherwise.
func (o *WannabeApplication) GetStickySessions() bool {
	if o == nil || o.StickySessions == nil {
		var ret bool
		return ret
	}
	return *o.StickySessions
}

// GetStickySessionsOk returns a tuple with the StickySessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetStickySessionsOk() (*bool, bool) {
	if o == nil || o.StickySessions == nil {
		return nil, false
	}
	return o.StickySessions, true
}

// HasStickySessions returns a boolean if a field has been set.
func (o *WannabeApplication) HasStickySessions() bool {
	if o != nil && o.StickySessions != nil {
		return true
	}

	return false
}

// SetStickySessions gets a reference to the given bool and assigns it to the StickySessions field.
func (o *WannabeApplication) SetStickySessions(v bool) {
	o.StickySessions = &v
}

// GetHomogeneous returns the Homogeneous field value if set, zero value otherwise.
func (o *WannabeApplication) GetHomogeneous() bool {
	if o == nil || o.Homogeneous == nil {
		var ret bool
		return ret
	}
	return *o.Homogeneous
}

// GetHomogeneousOk returns a tuple with the Homogeneous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetHomogeneousOk() (*bool, bool) {
	if o == nil || o.Homogeneous == nil {
		return nil, false
	}
	return o.Homogeneous, true
}

// HasHomogeneous returns a boolean if a field has been set.
func (o *WannabeApplication) HasHomogeneous() bool {
	if o != nil && o.Homogeneous != nil {
		return true
	}

	return false
}

// SetHomogeneous gets a reference to the given bool and assigns it to the Homogeneous field.
func (o *WannabeApplication) SetHomogeneous(v bool) {
	o.Homogeneous = &v
}

// GetFavourite returns the Favourite field value if set, zero value otherwise.
func (o *WannabeApplication) GetFavourite() bool {
	if o == nil || o.Favourite == nil {
		var ret bool
		return ret
	}
	return *o.Favourite
}

// GetFavouriteOk returns a tuple with the Favourite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetFavouriteOk() (*bool, bool) {
	if o == nil || o.Favourite == nil {
		return nil, false
	}
	return o.Favourite, true
}

// HasFavourite returns a boolean if a field has been set.
func (o *WannabeApplication) HasFavourite() bool {
	if o != nil && o.Favourite != nil {
		return true
	}

	return false
}

// SetFavourite gets a reference to the given bool and assigns it to the Favourite field.
func (o *WannabeApplication) SetFavourite(v bool) {
	o.Favourite = &v
}

// GetCancelOnPush returns the CancelOnPush field value if set, zero value otherwise.
func (o *WannabeApplication) GetCancelOnPush() bool {
	if o == nil || o.CancelOnPush == nil {
		var ret bool
		return ret
	}
	return *o.CancelOnPush
}

// GetCancelOnPushOk returns a tuple with the CancelOnPush field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetCancelOnPushOk() (*bool, bool) {
	if o == nil || o.CancelOnPush == nil {
		return nil, false
	}
	return o.CancelOnPush, true
}

// HasCancelOnPush returns a boolean if a field has been set.
func (o *WannabeApplication) HasCancelOnPush() bool {
	if o != nil && o.CancelOnPush != nil {
		return true
	}

	return false
}

// SetCancelOnPush gets a reference to the given bool and assigns it to the CancelOnPush field.
func (o *WannabeApplication) SetCancelOnPush(v bool) {
	o.CancelOnPush = &v
}

// GetSeparateBuild returns the SeparateBuild field value if set, zero value otherwise.
func (o *WannabeApplication) GetSeparateBuild() bool {
	if o == nil || o.SeparateBuild == nil {
		var ret bool
		return ret
	}
	return *o.SeparateBuild
}

// GetSeparateBuildOk returns a tuple with the SeparateBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetSeparateBuildOk() (*bool, bool) {
	if o == nil || o.SeparateBuild == nil {
		return nil, false
	}
	return o.SeparateBuild, true
}

// HasSeparateBuild returns a boolean if a field has been set.
func (o *WannabeApplication) HasSeparateBuild() bool {
	if o != nil && o.SeparateBuild != nil {
		return true
	}

	return false
}

// SetSeparateBuild gets a reference to the given bool and assigns it to the SeparateBuild field.
func (o *WannabeApplication) SetSeparateBuild(v bool) {
	o.SeparateBuild = &v
}

// GetBuildFlavor returns the BuildFlavor field value if set, zero value otherwise.
func (o *WannabeApplication) GetBuildFlavor() string {
	if o == nil || o.BuildFlavor == nil {
		var ret string
		return ret
	}
	return *o.BuildFlavor
}

// GetBuildFlavorOk returns a tuple with the BuildFlavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetBuildFlavorOk() (*string, bool) {
	if o == nil || o.BuildFlavor == nil {
		return nil, false
	}
	return o.BuildFlavor, true
}

// HasBuildFlavor returns a boolean if a field has been set.
func (o *WannabeApplication) HasBuildFlavor() bool {
	if o != nil && o.BuildFlavor != nil {
		return true
	}

	return false
}

// SetBuildFlavor gets a reference to the given string and assigns it to the BuildFlavor field.
func (o *WannabeApplication) SetBuildFlavor(v string) {
	o.BuildFlavor = &v
}

// GetOauthService returns the OauthService field value if set, zero value otherwise.
func (o *WannabeApplication) GetOauthService() string {
	if o == nil || o.OauthService == nil {
		var ret string
		return ret
	}
	return *o.OauthService
}

// GetOauthServiceOk returns a tuple with the OauthService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetOauthServiceOk() (*string, bool) {
	if o == nil || o.OauthService == nil {
		return nil, false
	}
	return o.OauthService, true
}

// HasOauthService returns a boolean if a field has been set.
func (o *WannabeApplication) HasOauthService() bool {
	if o != nil && o.OauthService != nil {
		return true
	}

	return false
}

// SetOauthService gets a reference to the given string and assigns it to the OauthService field.
func (o *WannabeApplication) SetOauthService(v string) {
	o.OauthService = &v
}

// GetOauthAppId returns the OauthAppId field value if set, zero value otherwise.
func (o *WannabeApplication) GetOauthAppId() string {
	if o == nil || o.OauthAppId == nil {
		var ret string
		return ret
	}
	return *o.OauthAppId
}

// GetOauthAppIdOk returns a tuple with the OauthAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetOauthAppIdOk() (*string, bool) {
	if o == nil || o.OauthAppId == nil {
		return nil, false
	}
	return o.OauthAppId, true
}

// HasOauthAppId returns a boolean if a field has been set.
func (o *WannabeApplication) HasOauthAppId() bool {
	if o != nil && o.OauthAppId != nil {
		return true
	}

	return false
}

// SetOauthAppId gets a reference to the given string and assigns it to the OauthAppId field.
func (o *WannabeApplication) SetOauthAppId(v string) {
	o.OauthAppId = &v
}

// GetOauthApp returns the OauthApp field value if set, zero value otherwise.
func (o *WannabeApplication) GetOauthApp() WannabeOauthApp {
	if o == nil || o.OauthApp == nil {
		var ret WannabeOauthApp
		return ret
	}
	return *o.OauthApp
}

// GetOauthAppOk returns a tuple with the OauthApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetOauthAppOk() (*WannabeOauthApp, bool) {
	if o == nil || o.OauthApp == nil {
		return nil, false
	}
	return o.OauthApp, true
}

// HasOauthApp returns a boolean if a field has been set.
func (o *WannabeApplication) HasOauthApp() bool {
	if o != nil && o.OauthApp != nil {
		return true
	}

	return false
}

// SetOauthApp gets a reference to the given WannabeOauthApp and assigns it to the OauthApp field.
func (o *WannabeApplication) SetOauthApp(v WannabeOauthApp) {
	o.OauthApp = &v
}

// GetApplianceId returns the ApplianceId field value if set, zero value otherwise.
func (o *WannabeApplication) GetApplianceId() string {
	if o == nil || o.ApplianceId == nil {
		var ret string
		return ret
	}
	return *o.ApplianceId
}

// GetApplianceIdOk returns a tuple with the ApplianceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetApplianceIdOk() (*string, bool) {
	if o == nil || o.ApplianceId == nil {
		return nil, false
	}
	return o.ApplianceId, true
}

// HasApplianceId returns a boolean if a field has been set.
func (o *WannabeApplication) HasApplianceId() bool {
	if o != nil && o.ApplianceId != nil {
		return true
	}

	return false
}

// SetApplianceId gets a reference to the given string and assigns it to the ApplianceId field.
func (o *WannabeApplication) SetApplianceId(v string) {
	o.ApplianceId = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *WannabeApplication) GetBranch() string {
	if o == nil || o.Branch == nil {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetBranchOk() (*string, bool) {
	if o == nil || o.Branch == nil {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *WannabeApplication) HasBranch() bool {
	if o != nil && o.Branch != nil {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *WannabeApplication) SetBranch(v string) {
	o.Branch = &v
}

// GetForceHttps returns the ForceHttps field value if set, zero value otherwise.
func (o *WannabeApplication) GetForceHttps() string {
	if o == nil || o.ForceHttps == nil {
		var ret string
		return ret
	}
	return *o.ForceHttps
}

// GetForceHttpsOk returns a tuple with the ForceHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WannabeApplication) GetForceHttpsOk() (*string, bool) {
	if o == nil || o.ForceHttps == nil {
		return nil, false
	}
	return o.ForceHttps, true
}

// HasForceHttps returns a boolean if a field has been set.
func (o *WannabeApplication) HasForceHttps() bool {
	if o != nil && o.ForceHttps != nil {
		return true
	}

	return false
}

// SetForceHttps gets a reference to the given string and assigns it to the ForceHttps field.
func (o *WannabeApplication) SetForceHttps(v string) {
	o.ForceHttps = &v
}

func (o WannabeApplication) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Zone != nil {
		toSerialize["zone"] = o.Zone
	}
	if o.Deploy != nil {
		toSerialize["deploy"] = o.Deploy
	}
	if o.Shutdownable != nil {
		toSerialize["shutdownable"] = o.Shutdownable
	}
	if o.InstanceType != nil {
		toSerialize["instanceType"] = o.InstanceType
	}
	if o.InstanceVersion != nil {
		toSerialize["instanceVersion"] = o.InstanceVersion
	}
	if o.InstanceVariant != nil {
		toSerialize["instanceVariant"] = o.InstanceVariant
	}
	if o.InstanceLifetime != nil {
		toSerialize["instanceLifetime"] = o.InstanceLifetime
	}
	if o.MinInstances != nil {
		toSerialize["minInstances"] = o.MinInstances
	}
	if o.MaxInstances != nil {
		toSerialize["maxInstances"] = o.MaxInstances
	}
	if o.MinFlavor != nil {
		toSerialize["minFlavor"] = o.MinFlavor
	}
	if o.MaxFlavor != nil {
		toSerialize["maxFlavor"] = o.MaxFlavor
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.StickySessions != nil {
		toSerialize["stickySessions"] = o.StickySessions
	}
	if o.Homogeneous != nil {
		toSerialize["homogeneous"] = o.Homogeneous
	}
	if o.Favourite != nil {
		toSerialize["favourite"] = o.Favourite
	}
	if o.CancelOnPush != nil {
		toSerialize["cancelOnPush"] = o.CancelOnPush
	}
	if o.SeparateBuild != nil {
		toSerialize["separateBuild"] = o.SeparateBuild
	}
	if o.BuildFlavor != nil {
		toSerialize["buildFlavor"] = o.BuildFlavor
	}
	if o.OauthService != nil {
		toSerialize["oauthService"] = o.OauthService
	}
	if o.OauthAppId != nil {
		toSerialize["oauthAppId"] = o.OauthAppId
	}
	if o.OauthApp != nil {
		toSerialize["oauthApp"] = o.OauthApp
	}
	if o.ApplianceId != nil {
		toSerialize["applianceId"] = o.ApplianceId
	}
	if o.Branch != nil {
		toSerialize["branch"] = o.Branch
	}
	if o.ForceHttps != nil {
		toSerialize["forceHttps"] = o.ForceHttps
	}
	return json.Marshal(toSerialize)
}

type NullableWannabeApplication struct {
	value *WannabeApplication
	isSet bool
}

func (v NullableWannabeApplication) Get() *WannabeApplication {
	return v.value
}

func (v *NullableWannabeApplication) Set(val *WannabeApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableWannabeApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableWannabeApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWannabeApplication(val *WannabeApplication) *NullableWannabeApplication {
	return &NullableWannabeApplication{value: val, isSet: true}
}

func (v NullableWannabeApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWannabeApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
