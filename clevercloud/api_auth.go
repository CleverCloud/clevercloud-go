/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package clevercloud

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// AuthApiService AuthApi service
type AuthApiService service

// AuthorizeFormOpts Optional parameters for the method 'AuthorizeForm'
type AuthorizeFormOpts struct {
	Ccid       optional.String
	Cctk       optional.String
	OauthToken optional.String
	Ccid2      optional.String
	CliToken   optional.String
	FromOauth  optional.String
}

/*
AuthorizeForm Method for AuthorizeForm
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AuthorizeFormOpts - Optional Parameters:
 * @param "Ccid" (optional.String) -
 * @param "Cctk" (optional.String) -
 * @param "OauthToken" (optional.String) -
 * @param "Ccid2" (optional.String) -
 * @param "CliToken" (optional.String) -
 * @param "FromOauth" (optional.String) -
@return string
*/
func (a *AuthApiService) AuthorizeForm(ctx _context.Context, localVarOptionals *AuthorizeFormOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/oauth/authorize"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.OauthToken.IsSet() {
		localVarQueryParams.Add("oauth_token", parameterToString(localVarOptionals.OauthToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ccid2.IsSet() {
		localVarQueryParams.Add("ccid", parameterToString(localVarOptionals.Ccid2.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CliToken.IsSet() {
		localVarQueryParams.Add("cli_token", parameterToString(localVarOptionals.CliToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FromOauth.IsSet() {
		localVarQueryParams.Add("from_oauth", parameterToString(localVarOptionals.FromOauth.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// AuthorizeTokenOpts Optional parameters for the method 'AuthorizeToken'
type AuthorizeTokenOpts struct {
	Ccid                                     optional.String
	Cctk                                     optional.String
	Almighty                                 optional.String
	AccessOrganisations                      optional.String
	ManageOrganisations                      optional.String
	ManageOrganisationsServices              optional.String
	ManageOrganisationsApplications          optional.String
	ManageOrganisationsMembers               optional.String
	AccessOrganisationsBills                 optional.String
	AccessOrganisationsCreditCount           optional.String
	AccessOrganisationsConsumptionStatistics optional.String
	AccessPersonalInformation                optional.String
	ManagePersonalInformation                optional.String
	ManageSshKeys                            optional.String
}

/*
AuthorizeToken Method for AuthorizeToken
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *AuthorizeTokenOpts - Optional Parameters:
 * @param "Ccid" (optional.String) -
 * @param "Cctk" (optional.String) -
 * @param "Almighty" (optional.String) -
 * @param "AccessOrganisations" (optional.String) -
 * @param "ManageOrganisations" (optional.String) -
 * @param "ManageOrganisationsServices" (optional.String) -
 * @param "ManageOrganisationsApplications" (optional.String) -
 * @param "ManageOrganisationsMembers" (optional.String) -
 * @param "AccessOrganisationsBills" (optional.String) -
 * @param "AccessOrganisationsCreditCount" (optional.String) -
 * @param "AccessOrganisationsConsumptionStatistics" (optional.String) -
 * @param "AccessPersonalInformation" (optional.String) -
 * @param "ManagePersonalInformation" (optional.String) -
 * @param "ManageSshKeys" (optional.String) -
*/
func (a *AuthApiService) AuthorizeToken(ctx _context.Context, localVarOptionals *AuthorizeTokenOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/oauth/authorize"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/html", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.Almighty.IsSet() {
		localVarFormParams.Add("almighty", parameterToString(localVarOptionals.Almighty.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessOrganisations.IsSet() {
		localVarFormParams.Add("access_organisations", parameterToString(localVarOptionals.AccessOrganisations.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageOrganisations.IsSet() {
		localVarFormParams.Add("manage_organisations", parameterToString(localVarOptionals.ManageOrganisations.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageOrganisationsServices.IsSet() {
		localVarFormParams.Add("manage_organisations_services", parameterToString(localVarOptionals.ManageOrganisationsServices.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageOrganisationsApplications.IsSet() {
		localVarFormParams.Add("manage_organisations_applications", parameterToString(localVarOptionals.ManageOrganisationsApplications.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageOrganisationsMembers.IsSet() {
		localVarFormParams.Add("manage_organisations_members", parameterToString(localVarOptionals.ManageOrganisationsMembers.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessOrganisationsBills.IsSet() {
		localVarFormParams.Add("access_organisations_bills", parameterToString(localVarOptionals.AccessOrganisationsBills.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessOrganisationsCreditCount.IsSet() {
		localVarFormParams.Add("access_organisations_credit_count", parameterToString(localVarOptionals.AccessOrganisationsCreditCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessOrganisationsConsumptionStatistics.IsSet() {
		localVarFormParams.Add("access_organisations_consumption_statistics", parameterToString(localVarOptionals.AccessOrganisationsConsumptionStatistics.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AccessPersonalInformation.IsSet() {
		localVarFormParams.Add("access_personal_information", parameterToString(localVarOptionals.AccessPersonalInformation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManagePersonalInformation.IsSet() {
		localVarFormParams.Add("manage_personal_information", parameterToString(localVarOptionals.ManagePersonalInformation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ManageSshKeys.IsSet() {
		localVarFormParams.Add("manage_ssh_keys", parameterToString(localVarOptionals.ManageSshKeys.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
GetAvailableRights Method for GetAvailableRights
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/
func (a *AuthApiService) GetAvailableRights(ctx _context.Context) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/oauth/rights"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// GetLoginDataOpts Optional parameters for the method 'GetLoginData'
type GetLoginDataOpts struct {
	OauthKey optional.String
}

/*
GetLoginData Method for GetLoginData
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *GetLoginDataOpts - Optional Parameters:
 * @param "OauthKey" (optional.String) -
*/
func (a *AuthApiService) GetLoginData(ctx _context.Context, localVarOptionals *GetLoginDataOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/oauth/login_data"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.OauthKey.IsSet() {
		localVarQueryParams.Add("oauth_key", parameterToString(localVarOptionals.OauthKey.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// PostAccessTokenRequestOpts Optional parameters for the method 'PostAccessTokenRequest'
type PostAccessTokenRequestOpts struct {
	OauthConsumerKey       optional.String
	OauthToken             optional.String
	OauthSignatureMethod   optional.String
	OauthSignature         optional.String
	OauthTimestamp         optional.String
	OauthNonce             optional.String
	OauthVersion           optional.String
	OauthVerifier          optional.String
	OauthCallback          optional.String
	OauthTokenSecret       optional.String
	OauthCallbackConfirmed optional.String
}

/*
PostAccessTokenRequest Method for PostAccessTokenRequest
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PostAccessTokenRequestOpts - Optional Parameters:
 * @param "OauthConsumerKey" (optional.String) -
 * @param "OauthToken" (optional.String) -
 * @param "OauthSignatureMethod" (optional.String) -
 * @param "OauthSignature" (optional.String) -
 * @param "OauthTimestamp" (optional.String) -
 * @param "OauthNonce" (optional.String) -
 * @param "OauthVersion" (optional.String) -
 * @param "OauthVerifier" (optional.String) -
 * @param "OauthCallback" (optional.String) -
 * @param "OauthTokenSecret" (optional.String) -
 * @param "OauthCallbackConfirmed" (optional.String) -
*/
func (a *AuthApiService) PostAccessTokenRequest(ctx _context.Context, localVarOptionals *PostAccessTokenRequestOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/oauth/access_token"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-www-form-urlencoded"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.OauthConsumerKey.IsSet() {
		localVarFormParams.Add("oauth_consumer_key", parameterToString(localVarOptionals.OauthConsumerKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthToken.IsSet() {
		localVarFormParams.Add("oauth_token", parameterToString(localVarOptionals.OauthToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthSignatureMethod.IsSet() {
		localVarFormParams.Add("oauth_signature_method", parameterToString(localVarOptionals.OauthSignatureMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthSignature.IsSet() {
		localVarFormParams.Add("oauth_signature", parameterToString(localVarOptionals.OauthSignature.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthTimestamp.IsSet() {
		localVarFormParams.Add("oauth_timestamp", parameterToString(localVarOptionals.OauthTimestamp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthNonce.IsSet() {
		localVarFormParams.Add("oauth_nonce", parameterToString(localVarOptionals.OauthNonce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthVersion.IsSet() {
		localVarFormParams.Add("oauth_version", parameterToString(localVarOptionals.OauthVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthVerifier.IsSet() {
		localVarFormParams.Add("oauth_verifier", parameterToString(localVarOptionals.OauthVerifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthCallback.IsSet() {
		localVarFormParams.Add("oauth_callback", parameterToString(localVarOptionals.OauthCallback.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthTokenSecret.IsSet() {
		localVarFormParams.Add("oauth_token_secret", parameterToString(localVarOptionals.OauthTokenSecret.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthCallbackConfirmed.IsSet() {
		localVarFormParams.Add("oauth_callback_confirmed", parameterToString(localVarOptionals.OauthCallbackConfirmed.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// PostAccessTokenRequestQueryOpts Optional parameters for the method 'PostAccessTokenRequestQuery'
type PostAccessTokenRequestQueryOpts struct {
	OauthConsumerKey       optional.String
	OauthToken             optional.String
	OauthSignatureMethod   optional.String
	OauthSignature         optional.String
	OauthTimestamp         optional.String
	OauthNonce             optional.String
	OauthVersion           optional.String
	OauthVerifier          optional.String
	OauthCallback          optional.String
	OauthTokenSecret       optional.String
	OauthCallbackConfirmed optional.String
}

/*
PostAccessTokenRequestQuery Method for PostAccessTokenRequestQuery
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PostAccessTokenRequestQueryOpts - Optional Parameters:
 * @param "OauthConsumerKey" (optional.String) -
 * @param "OauthToken" (optional.String) -
 * @param "OauthSignatureMethod" (optional.String) -
 * @param "OauthSignature" (optional.String) -
 * @param "OauthTimestamp" (optional.String) -
 * @param "OauthNonce" (optional.String) -
 * @param "OauthVersion" (optional.String) -
 * @param "OauthVerifier" (optional.String) -
 * @param "OauthCallback" (optional.String) -
 * @param "OauthTokenSecret" (optional.String) -
 * @param "OauthCallbackConfirmed" (optional.String) -
*/
func (a *AuthApiService) PostAccessTokenRequestQuery(ctx _context.Context, localVarOptionals *PostAccessTokenRequestQueryOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/oauth/access_token_query"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.OauthConsumerKey.IsSet() {
		localVarQueryParams.Add("oauth_consumer_key", parameterToString(localVarOptionals.OauthConsumerKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthToken.IsSet() {
		localVarQueryParams.Add("oauth_token", parameterToString(localVarOptionals.OauthToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthSignatureMethod.IsSet() {
		localVarQueryParams.Add("oauth_signature_method", parameterToString(localVarOptionals.OauthSignatureMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthSignature.IsSet() {
		localVarQueryParams.Add("oauth_signature", parameterToString(localVarOptionals.OauthSignature.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthTimestamp.IsSet() {
		localVarQueryParams.Add("oauth_timestamp", parameterToString(localVarOptionals.OauthTimestamp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthNonce.IsSet() {
		localVarQueryParams.Add("oauth_nonce", parameterToString(localVarOptionals.OauthNonce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthVersion.IsSet() {
		localVarQueryParams.Add("oauth_version", parameterToString(localVarOptionals.OauthVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthVerifier.IsSet() {
		localVarQueryParams.Add("oauth_verifier", parameterToString(localVarOptionals.OauthVerifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthCallback.IsSet() {
		localVarQueryParams.Add("oauth_callback", parameterToString(localVarOptionals.OauthCallback.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthTokenSecret.IsSet() {
		localVarQueryParams.Add("oauth_token_secret", parameterToString(localVarOptionals.OauthTokenSecret.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthCallbackConfirmed.IsSet() {
		localVarQueryParams.Add("oauth_callback_confirmed", parameterToString(localVarOptionals.OauthCallbackConfirmed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-www-form-urlencoded"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
PostAuthorize Method for PostAuthorize
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param wannabeAuthorization
@return Message
*/
func (a *AuthApiService) PostAuthorize(ctx _context.Context, wannabeAuthorization WannabeAuthorization) (Message, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Message
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/authorize"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &wannabeAuthorization
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// PostReqTokenRequestOpts Optional parameters for the method 'PostReqTokenRequest'
type PostReqTokenRequestOpts struct {
	CleverFlavor           optional.String
	OauthConsumerKey       optional.String
	OauthToken             optional.String
	OauthSignatureMethod   optional.String
	OauthSignature         optional.String
	OauthTimestamp         optional.String
	OauthNonce             optional.String
	OauthVersion           optional.String
	OauthVerifier          optional.String
	OauthCallback          optional.String
	OauthTokenSecret       optional.String
	OauthCallbackConfirmed optional.String
}

/*
PostReqTokenRequest Method for PostReqTokenRequest
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PostReqTokenRequestOpts - Optional Parameters:
 * @param "CleverFlavor" (optional.String) -
 * @param "OauthConsumerKey" (optional.String) -
 * @param "OauthToken" (optional.String) -
 * @param "OauthSignatureMethod" (optional.String) -
 * @param "OauthSignature" (optional.String) -
 * @param "OauthTimestamp" (optional.String) -
 * @param "OauthNonce" (optional.String) -
 * @param "OauthVersion" (optional.String) -
 * @param "OauthVerifier" (optional.String) -
 * @param "OauthCallback" (optional.String) -
 * @param "OauthTokenSecret" (optional.String) -
 * @param "OauthCallbackConfirmed" (optional.String) -
@return string
*/
func (a *AuthApiService) PostReqTokenRequest(ctx _context.Context, localVarOptionals *PostReqTokenRequestOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/oauth/request_token"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.CleverFlavor.IsSet() {
		localVarQueryParams.Add("clever_flavor", parameterToString(localVarOptionals.CleverFlavor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-www-form-urlencoded"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.OauthConsumerKey.IsSet() {
		localVarFormParams.Add("oauth_consumer_key", parameterToString(localVarOptionals.OauthConsumerKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthToken.IsSet() {
		localVarFormParams.Add("oauth_token", parameterToString(localVarOptionals.OauthToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthSignatureMethod.IsSet() {
		localVarFormParams.Add("oauth_signature_method", parameterToString(localVarOptionals.OauthSignatureMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthSignature.IsSet() {
		localVarFormParams.Add("oauth_signature", parameterToString(localVarOptionals.OauthSignature.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthTimestamp.IsSet() {
		localVarFormParams.Add("oauth_timestamp", parameterToString(localVarOptionals.OauthTimestamp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthNonce.IsSet() {
		localVarFormParams.Add("oauth_nonce", parameterToString(localVarOptionals.OauthNonce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthVersion.IsSet() {
		localVarFormParams.Add("oauth_version", parameterToString(localVarOptionals.OauthVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthVerifier.IsSet() {
		localVarFormParams.Add("oauth_verifier", parameterToString(localVarOptionals.OauthVerifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthCallback.IsSet() {
		localVarFormParams.Add("oauth_callback", parameterToString(localVarOptionals.OauthCallback.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthTokenSecret.IsSet() {
		localVarFormParams.Add("oauth_token_secret", parameterToString(localVarOptionals.OauthTokenSecret.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthCallbackConfirmed.IsSet() {
		localVarFormParams.Add("oauth_callback_confirmed", parameterToString(localVarOptionals.OauthCallbackConfirmed.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// PostReqTokenRequestQueryStringOpts Optional parameters for the method 'PostReqTokenRequestQueryString'
type PostReqTokenRequestQueryStringOpts struct {
	CleverFlavor           optional.String
	OauthConsumerKey       optional.String
	OauthToken             optional.String
	OauthSignatureMethod   optional.String
	OauthSignature         optional.String
	OauthTimestamp         optional.String
	OauthNonce             optional.String
	OauthVersion           optional.String
	OauthVerifier          optional.String
	OauthCallback          optional.String
	OauthTokenSecret       optional.String
	OauthCallbackConfirmed optional.String
}

/*
PostReqTokenRequestQueryString Method for PostReqTokenRequestQueryString
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PostReqTokenRequestQueryStringOpts - Optional Parameters:
 * @param "CleverFlavor" (optional.String) -
 * @param "OauthConsumerKey" (optional.String) -
 * @param "OauthToken" (optional.String) -
 * @param "OauthSignatureMethod" (optional.String) -
 * @param "OauthSignature" (optional.String) -
 * @param "OauthTimestamp" (optional.String) -
 * @param "OauthNonce" (optional.String) -
 * @param "OauthVersion" (optional.String) -
 * @param "OauthVerifier" (optional.String) -
 * @param "OauthCallback" (optional.String) -
 * @param "OauthTokenSecret" (optional.String) -
 * @param "OauthCallbackConfirmed" (optional.String) -
@return string
*/
func (a *AuthApiService) PostReqTokenRequestQueryString(ctx _context.Context, localVarOptionals *PostReqTokenRequestQueryStringOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/oauth/request_token_query"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.CleverFlavor.IsSet() {
		localVarQueryParams.Add("clever_flavor", parameterToString(localVarOptionals.CleverFlavor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthConsumerKey.IsSet() {
		localVarQueryParams.Add("oauth_consumer_key", parameterToString(localVarOptionals.OauthConsumerKey.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthToken.IsSet() {
		localVarQueryParams.Add("oauth_token", parameterToString(localVarOptionals.OauthToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthSignatureMethod.IsSet() {
		localVarQueryParams.Add("oauth_signature_method", parameterToString(localVarOptionals.OauthSignatureMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthSignature.IsSet() {
		localVarQueryParams.Add("oauth_signature", parameterToString(localVarOptionals.OauthSignature.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthTimestamp.IsSet() {
		localVarQueryParams.Add("oauth_timestamp", parameterToString(localVarOptionals.OauthTimestamp.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthNonce.IsSet() {
		localVarQueryParams.Add("oauth_nonce", parameterToString(localVarOptionals.OauthNonce.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthVersion.IsSet() {
		localVarQueryParams.Add("oauth_version", parameterToString(localVarOptionals.OauthVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthVerifier.IsSet() {
		localVarQueryParams.Add("oauth_verifier", parameterToString(localVarOptionals.OauthVerifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthCallback.IsSet() {
		localVarQueryParams.Add("oauth_callback", parameterToString(localVarOptionals.OauthCallback.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthTokenSecret.IsSet() {
		localVarQueryParams.Add("oauth_token_secret", parameterToString(localVarOptionals.OauthTokenSecret.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OauthCallbackConfirmed.IsSet() {
		localVarQueryParams.Add("oauth_callback_confirmed", parameterToString(localVarOptionals.OauthCallbackConfirmed.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-www-form-urlencoded"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
