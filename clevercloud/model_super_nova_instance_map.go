/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// SuperNovaInstanceMap struct for SuperNovaInstanceMap
type SuperNovaInstanceMap struct {
	Empty *bool `json:"empty,omitempty"`
}

// NewSuperNovaInstanceMap instantiates a new SuperNovaInstanceMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperNovaInstanceMap() *SuperNovaInstanceMap {
	this := SuperNovaInstanceMap{}
	return &this
}

// NewSuperNovaInstanceMapWithDefaults instantiates a new SuperNovaInstanceMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperNovaInstanceMapWithDefaults() *SuperNovaInstanceMap {
	this := SuperNovaInstanceMap{}
	return &this
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *SuperNovaInstanceMap) GetEmpty() bool {
	if o == nil || o.Empty == nil {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperNovaInstanceMap) GetEmptyOk() (*bool, bool) {
	if o == nil || o.Empty == nil {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *SuperNovaInstanceMap) HasEmpty() bool {
	if o != nil && o.Empty != nil {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *SuperNovaInstanceMap) SetEmpty(v bool) {
	o.Empty = &v
}

func (o SuperNovaInstanceMap) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Empty != nil {
		toSerialize["empty"] = o.Empty
	}
	return json.Marshal(toSerialize)
}

type NullableSuperNovaInstanceMap struct {
	value *SuperNovaInstanceMap
	isSet bool
}

func (v NullableSuperNovaInstanceMap) Get() *SuperNovaInstanceMap {
	return v.value
}

func (v *NullableSuperNovaInstanceMap) Set(val *SuperNovaInstanceMap) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperNovaInstanceMap) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperNovaInstanceMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperNovaInstanceMap(val *SuperNovaInstanceMap) *NullableSuperNovaInstanceMap {
	return &NullableSuperNovaInstanceMap{value: val, isSet: true}
}

func (v NullableSuperNovaInstanceMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperNovaInstanceMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
