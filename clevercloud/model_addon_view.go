/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// AddonView struct for AddonView
type AddonView struct {
	Id           *string                `json:"id,omitempty"`
	Name         *string                `json:"name,omitempty"`
	RealId       *string                `json:"realId,omitempty"`
	Region       *string                `json:"region,omitempty"`
	Provider     *AddonProviderInfoView `json:"provider,omitempty"`
	Plan         *AddonPlanView         `json:"plan,omitempty"`
	CreationDate *int64                 `json:"creationDate,omitempty"`
	ConfigKeys   *[]string              `json:"configKeys,omitempty"`
}

// NewAddonView instantiates a new AddonView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonView() *AddonView {
	this := AddonView{}
	return &this
}

// NewAddonViewWithDefaults instantiates a new AddonView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonViewWithDefaults() *AddonView {
	this := AddonView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddonView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddonView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddonView) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddonView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AddonView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddonView) SetName(v string) {
	o.Name = &v
}

// GetRealId returns the RealId field value if set, zero value otherwise.
func (o *AddonView) GetRealId() string {
	if o == nil || o.RealId == nil {
		var ret string
		return ret
	}
	return *o.RealId
}

// GetRealIdOk returns a tuple with the RealId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonView) GetRealIdOk() (*string, bool) {
	if o == nil || o.RealId == nil {
		return nil, false
	}
	return o.RealId, true
}

// HasRealId returns a boolean if a field has been set.
func (o *AddonView) HasRealId() bool {
	if o != nil && o.RealId != nil {
		return true
	}

	return false
}

// SetRealId gets a reference to the given string and assigns it to the RealId field.
func (o *AddonView) SetRealId(v string) {
	o.RealId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *AddonView) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonView) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *AddonView) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *AddonView) SetRegion(v string) {
	o.Region = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *AddonView) GetProvider() AddonProviderInfoView {
	if o == nil || o.Provider == nil {
		var ret AddonProviderInfoView
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonView) GetProviderOk() (*AddonProviderInfoView, bool) {
	if o == nil || o.Provider == nil {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *AddonView) HasProvider() bool {
	if o != nil && o.Provider != nil {
		return true
	}

	return false
}

// SetProvider gets a reference to the given AddonProviderInfoView and assigns it to the Provider field.
func (o *AddonView) SetProvider(v AddonProviderInfoView) {
	o.Provider = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *AddonView) GetPlan() AddonPlanView {
	if o == nil || o.Plan == nil {
		var ret AddonPlanView
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonView) GetPlanOk() (*AddonPlanView, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *AddonView) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given AddonPlanView and assigns it to the Plan field.
func (o *AddonView) SetPlan(v AddonPlanView) {
	o.Plan = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *AddonView) GetCreationDate() int64 {
	if o == nil || o.CreationDate == nil {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonView) GetCreationDateOk() (*int64, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *AddonView) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *AddonView) SetCreationDate(v int64) {
	o.CreationDate = &v
}

// GetConfigKeys returns the ConfigKeys field value if set, zero value otherwise.
func (o *AddonView) GetConfigKeys() []string {
	if o == nil || o.ConfigKeys == nil {
		var ret []string
		return ret
	}
	return *o.ConfigKeys
}

// GetConfigKeysOk returns a tuple with the ConfigKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonView) GetConfigKeysOk() (*[]string, bool) {
	if o == nil || o.ConfigKeys == nil {
		return nil, false
	}
	return o.ConfigKeys, true
}

// HasConfigKeys returns a boolean if a field has been set.
func (o *AddonView) HasConfigKeys() bool {
	if o != nil && o.ConfigKeys != nil {
		return true
	}

	return false
}

// SetConfigKeys gets a reference to the given []string and assigns it to the ConfigKeys field.
func (o *AddonView) SetConfigKeys(v []string) {
	o.ConfigKeys = &v
}

func (o AddonView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RealId != nil {
		toSerialize["realId"] = o.RealId
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Provider != nil {
		toSerialize["provider"] = o.Provider
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.CreationDate != nil {
		toSerialize["creationDate"] = o.CreationDate
	}
	if o.ConfigKeys != nil {
		toSerialize["configKeys"] = o.ConfigKeys
	}
	return json.Marshal(toSerialize)
}

type NullableAddonView struct {
	value *AddonView
	isSet bool
}

func (v NullableAddonView) Get() *AddonView {
	return v.value
}

func (v *NullableAddonView) Set(val *AddonView) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonView) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonView(val *AddonView) *NullableAddonView {
	return &NullableAddonView{value: val, isSet: true}
}

func (v NullableAddonView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
