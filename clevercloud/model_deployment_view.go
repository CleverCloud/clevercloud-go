/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// DeploymentView struct for DeploymentView
type DeploymentView struct {
	Id        *int32  `json:"id,omitempty"`
	Uuid      *string `json:"uuid,omitempty"`
	Date      *int64  `json:"date,omitempty"`
	State     *string `json:"state,omitempty"`
	Action    *string `json:"action,omitempty"`
	Commit    *string `json:"commit,omitempty"`
	Cause     *string `json:"cause,omitempty"`
	Instances *int32  `json:"instances,omitempty"`
	Author    *Author `json:"author,omitempty"`
}

// NewDeploymentView instantiates a new DeploymentView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentView() *DeploymentView {
	this := DeploymentView{}
	return &this
}

// NewDeploymentViewWithDefaults instantiates a new DeploymentView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentViewWithDefaults() *DeploymentView {
	this := DeploymentView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeploymentView) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentView) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeploymentView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DeploymentView) SetId(v int32) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DeploymentView) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentView) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DeploymentView) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DeploymentView) SetUuid(v string) {
	o.Uuid = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *DeploymentView) GetDate() int64 {
	if o == nil || o.Date == nil {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentView) GetDateOk() (*int64, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *DeploymentView) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *DeploymentView) SetDate(v int64) {
	o.Date = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *DeploymentView) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentView) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *DeploymentView) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *DeploymentView) SetState(v string) {
	o.State = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *DeploymentView) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentView) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *DeploymentView) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *DeploymentView) SetAction(v string) {
	o.Action = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *DeploymentView) GetCommit() string {
	if o == nil || o.Commit == nil {
		var ret string
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentView) GetCommitOk() (*string, bool) {
	if o == nil || o.Commit == nil {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *DeploymentView) HasCommit() bool {
	if o != nil && o.Commit != nil {
		return true
	}

	return false
}

// SetCommit gets a reference to the given string and assigns it to the Commit field.
func (o *DeploymentView) SetCommit(v string) {
	o.Commit = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *DeploymentView) GetCause() string {
	if o == nil || o.Cause == nil {
		var ret string
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentView) GetCauseOk() (*string, bool) {
	if o == nil || o.Cause == nil {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *DeploymentView) HasCause() bool {
	if o != nil && o.Cause != nil {
		return true
	}

	return false
}

// SetCause gets a reference to the given string and assigns it to the Cause field.
func (o *DeploymentView) SetCause(v string) {
	o.Cause = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *DeploymentView) GetInstances() int32 {
	if o == nil || o.Instances == nil {
		var ret int32
		return ret
	}
	return *o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentView) GetInstancesOk() (*int32, bool) {
	if o == nil || o.Instances == nil {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *DeploymentView) HasInstances() bool {
	if o != nil && o.Instances != nil {
		return true
	}

	return false
}

// SetInstances gets a reference to the given int32 and assigns it to the Instances field.
func (o *DeploymentView) SetInstances(v int32) {
	o.Instances = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *DeploymentView) GetAuthor() Author {
	if o == nil || o.Author == nil {
		var ret Author
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentView) GetAuthorOk() (*Author, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *DeploymentView) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Author and assigns it to the Author field.
func (o *DeploymentView) SetAuthor(v Author) {
	o.Author = &v
}

func (o DeploymentView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Commit != nil {
		toSerialize["commit"] = o.Commit
	}
	if o.Cause != nil {
		toSerialize["cause"] = o.Cause
	}
	if o.Instances != nil {
		toSerialize["instances"] = o.Instances
	}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	return json.Marshal(toSerialize)
}

type NullableDeploymentView struct {
	value *DeploymentView
	isSet bool
}

func (v NullableDeploymentView) Get() *DeploymentView {
	return v.value
}

func (v *NullableDeploymentView) Set(val *DeploymentView) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentView) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentView(val *DeploymentView) *NullableDeploymentView {
	return &NullableDeploymentView{value: val, isSet: true}
}

func (v NullableDeploymentView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
