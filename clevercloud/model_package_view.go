/*
 * Clever-Cloud API
 *
 * Public API for managing Clever-Cloud data and products
 *
 * API version: 1.0.1
 * Contact: support@clever-cloud.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clevercloud

import (
	"encoding/json"
)

// PackageView struct for PackageView
type PackageView struct {
	DropsQuantity *float32       `json:"dropsQuantity,omitempty"`
	DropPrice     *DropPriceView `json:"dropPrice,omitempty"`
	Title         *string        `json:"title,omitempty"`
	Price         *float32       `json:"price,omitempty"`
	OriginalPrice *float32       `json:"originalPrice,omitempty"`
	Id            *int64         `json:"id,omitempty"`
}

// NewPackageView instantiates a new PackageView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageView() *PackageView {
	this := PackageView{}
	return &this
}

// NewPackageViewWithDefaults instantiates a new PackageView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageViewWithDefaults() *PackageView {
	this := PackageView{}
	return &this
}

// GetDropsQuantity returns the DropsQuantity field value if set, zero value otherwise.
func (o *PackageView) GetDropsQuantity() float32 {
	if o == nil || o.DropsQuantity == nil {
		var ret float32
		return ret
	}
	return *o.DropsQuantity
}

// GetDropsQuantityOk returns a tuple with the DropsQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageView) GetDropsQuantityOk() (*float32, bool) {
	if o == nil || o.DropsQuantity == nil {
		return nil, false
	}
	return o.DropsQuantity, true
}

// HasDropsQuantity returns a boolean if a field has been set.
func (o *PackageView) HasDropsQuantity() bool {
	if o != nil && o.DropsQuantity != nil {
		return true
	}

	return false
}

// SetDropsQuantity gets a reference to the given float32 and assigns it to the DropsQuantity field.
func (o *PackageView) SetDropsQuantity(v float32) {
	o.DropsQuantity = &v
}

// GetDropPrice returns the DropPrice field value if set, zero value otherwise.
func (o *PackageView) GetDropPrice() DropPriceView {
	if o == nil || o.DropPrice == nil {
		var ret DropPriceView
		return ret
	}
	return *o.DropPrice
}

// GetDropPriceOk returns a tuple with the DropPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageView) GetDropPriceOk() (*DropPriceView, bool) {
	if o == nil || o.DropPrice == nil {
		return nil, false
	}
	return o.DropPrice, true
}

// HasDropPrice returns a boolean if a field has been set.
func (o *PackageView) HasDropPrice() bool {
	if o != nil && o.DropPrice != nil {
		return true
	}

	return false
}

// SetDropPrice gets a reference to the given DropPriceView and assigns it to the DropPrice field.
func (o *PackageView) SetDropPrice(v DropPriceView) {
	o.DropPrice = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PackageView) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageView) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PackageView) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PackageView) SetTitle(v string) {
	o.Title = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PackageView) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageView) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PackageView) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *PackageView) SetPrice(v float32) {
	o.Price = &v
}

// GetOriginalPrice returns the OriginalPrice field value if set, zero value otherwise.
func (o *PackageView) GetOriginalPrice() float32 {
	if o == nil || o.OriginalPrice == nil {
		var ret float32
		return ret
	}
	return *o.OriginalPrice
}

// GetOriginalPriceOk returns a tuple with the OriginalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageView) GetOriginalPriceOk() (*float32, bool) {
	if o == nil || o.OriginalPrice == nil {
		return nil, false
	}
	return o.OriginalPrice, true
}

// HasOriginalPrice returns a boolean if a field has been set.
func (o *PackageView) HasOriginalPrice() bool {
	if o != nil && o.OriginalPrice != nil {
		return true
	}

	return false
}

// SetOriginalPrice gets a reference to the given float32 and assigns it to the OriginalPrice field.
func (o *PackageView) SetOriginalPrice(v float32) {
	o.OriginalPrice = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PackageView) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageView) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PackageView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PackageView) SetId(v int64) {
	o.Id = &v
}

func (o PackageView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DropsQuantity != nil {
		toSerialize["dropsQuantity"] = o.DropsQuantity
	}
	if o.DropPrice != nil {
		toSerialize["dropPrice"] = o.DropPrice
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.OriginalPrice != nil {
		toSerialize["originalPrice"] = o.OriginalPrice
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullablePackageView struct {
	value *PackageView
	isSet bool
}

func (v NullablePackageView) Get() *PackageView {
	return v.value
}

func (v *NullablePackageView) Set(val *PackageView) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageView) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageView(val *PackageView) *NullablePackageView {
	return &NullablePackageView{value: val, isSet: true}
}

func (v NullablePackageView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
